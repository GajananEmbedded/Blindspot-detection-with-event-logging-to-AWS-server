
test_ultra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00004230  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004244  20004244  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011721  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278a  00000000  00000000  00031765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00033ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  00035088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002208f  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cd1  00000000  00000000  00058187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47ea  00000000  00000000  00069e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e642  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b1c  00000000  00000000  0013e694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d14 	.word	0x08005d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005d14 	.word	0x08005d14

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c0:	f000 b974 	b.w	8000cac <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468e      	mov	lr, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d14d      	bne.n	8000a86 <__udivmoddi4+0xaa>
 80009ea:	428a      	cmp	r2, r1
 80009ec:	4694      	mov	ip, r2
 80009ee:	d969      	bls.n	8000ac4 <__udivmoddi4+0xe8>
 80009f0:	fab2 f282 	clz	r2, r2
 80009f4:	b152      	cbz	r2, 8000a0c <__udivmoddi4+0x30>
 80009f6:	fa01 f302 	lsl.w	r3, r1, r2
 80009fa:	f1c2 0120 	rsb	r1, r2, #32
 80009fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000a02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a06:	ea41 0e03 	orr.w	lr, r1, r3
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a10:	0c21      	lsrs	r1, r4, #16
 8000a12:	fbbe f6f8 	udiv	r6, lr, r8
 8000a16:	fa1f f78c 	uxth.w	r7, ip
 8000a1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a22:	fb06 f107 	mul.w	r1, r6, r7
 8000a26:	4299      	cmp	r1, r3
 8000a28:	d90a      	bls.n	8000a40 <__udivmoddi4+0x64>
 8000a2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a32:	f080 811f 	bcs.w	8000c74 <__udivmoddi4+0x298>
 8000a36:	4299      	cmp	r1, r3
 8000a38:	f240 811c 	bls.w	8000c74 <__udivmoddi4+0x298>
 8000a3c:	3e02      	subs	r6, #2
 8000a3e:	4463      	add	r3, ip
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a48:	fb08 3310 	mls	r3, r8, r0, r3
 8000a4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a50:	fb00 f707 	mul.w	r7, r0, r7
 8000a54:	42a7      	cmp	r7, r4
 8000a56:	d90a      	bls.n	8000a6e <__udivmoddi4+0x92>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a60:	f080 810a 	bcs.w	8000c78 <__udivmoddi4+0x29c>
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	f240 8107 	bls.w	8000c78 <__udivmoddi4+0x29c>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a72:	1be4      	subs	r4, r4, r7
 8000a74:	2600      	movs	r6, #0
 8000a76:	b11d      	cbz	r5, 8000a80 <__udivmoddi4+0xa4>
 8000a78:	40d4      	lsrs	r4, r2
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d909      	bls.n	8000a9e <__udivmoddi4+0xc2>
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	f000 80ef 	beq.w	8000c6e <__udivmoddi4+0x292>
 8000a90:	2600      	movs	r6, #0
 8000a92:	e9c5 0100 	strd	r0, r1, [r5]
 8000a96:	4630      	mov	r0, r6
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	fab3 f683 	clz	r6, r3
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d14a      	bne.n	8000b3c <__udivmoddi4+0x160>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xd4>
 8000aaa:	4282      	cmp	r2, r0
 8000aac:	f200 80f9 	bhi.w	8000ca2 <__udivmoddi4+0x2c6>
 8000ab0:	1a84      	subs	r4, r0, r2
 8000ab2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	469e      	mov	lr, r3
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d0e0      	beq.n	8000a80 <__udivmoddi4+0xa4>
 8000abe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ac2:	e7dd      	b.n	8000a80 <__udivmoddi4+0xa4>
 8000ac4:	b902      	cbnz	r2, 8000ac8 <__udivmoddi4+0xec>
 8000ac6:	deff      	udf	#255	; 0xff
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	f040 8092 	bne.w	8000bf6 <__udivmoddi4+0x21a>
 8000ad2:	eba1 010c 	sub.w	r1, r1, ip
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2601      	movs	r6, #1
 8000ae0:	0c20      	lsrs	r0, r4, #16
 8000ae2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ae6:	fb07 1113 	mls	r1, r7, r3, r1
 8000aea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aee:	fb0e f003 	mul.w	r0, lr, r3
 8000af2:	4288      	cmp	r0, r1
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x12c>
 8000af6:	eb1c 0101 	adds.w	r1, ip, r1
 8000afa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x12a>
 8000b00:	4288      	cmp	r0, r1
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2c0>
 8000b06:	4643      	mov	r3, r8
 8000b08:	1a09      	subs	r1, r1, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b10:	fb07 1110 	mls	r1, r7, r0, r1
 8000b14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x156>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x154>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2ca>
 8000b30:	4608      	mov	r0, r1
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b3a:	e79c      	b.n	8000a76 <__udivmoddi4+0x9a>
 8000b3c:	f1c6 0720 	rsb	r7, r6, #32
 8000b40:	40b3      	lsls	r3, r6
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b52:	431c      	orrs	r4, r3
 8000b54:	40f9      	lsrs	r1, r7
 8000b56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b62:	0c20      	lsrs	r0, r4, #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fb09 1118 	mls	r1, r9, r8, r1
 8000b6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b70:	fb08 f00e 	mul.w	r0, r8, lr
 8000b74:	4288      	cmp	r0, r1
 8000b76:	fa02 f206 	lsl.w	r2, r2, r6
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b8>
 8000b7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2bc>
 8000b88:	4288      	cmp	r0, r1
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2bc>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1a09      	subs	r1, r1, r0
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	458e      	cmp	lr, r1
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1e2>
 8000bac:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2b4>
 8000bb6:	458e      	cmp	lr, r1
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2b4>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4461      	add	r1, ip
 8000bbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bc6:	eba1 010e 	sub.w	r1, r1, lr
 8000bca:	42a1      	cmp	r1, r4
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46a6      	mov	lr, r4
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x2a4>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x2a0>
 8000bd4:	b15d      	cbz	r5, 8000bee <__udivmoddi4+0x212>
 8000bd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bda:	eb61 010e 	sbc.w	r1, r1, lr
 8000bde:	fa01 f707 	lsl.w	r7, r1, r7
 8000be2:	fa22 f306 	lsr.w	r3, r2, r6
 8000be6:	40f1      	lsrs	r1, r6
 8000be8:	431f      	orrs	r7, r3
 8000bea:	e9c5 7100 	strd	r7, r1, [r5]
 8000bee:	2600      	movs	r6, #0
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	40d8      	lsrs	r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	fa21 f303 	lsr.w	r3, r1, r3
 8000c04:	4091      	lsls	r1, r2
 8000c06:	4301      	orrs	r1, r0
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c14:	fb07 3610 	mls	r6, r7, r0, r3
 8000c18:	0c0b      	lsrs	r3, r1, #16
 8000c1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c22:	429e      	cmp	r6, r3
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x260>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b8>
 8000c34:	429e      	cmp	r6, r3
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b8>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	b289      	uxth	r1, r1
 8000c40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c44:	fb07 3316 	mls	r3, r7, r6, r3
 8000c48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x28a>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2b0>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2b0>
 8000c62:	3e02      	subs	r6, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	1ac9      	subs	r1, r1, r3
 8000c68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0x104>
 8000c6e:	462e      	mov	r6, r5
 8000c70:	4628      	mov	r0, r5
 8000c72:	e705      	b.n	8000a80 <__udivmoddi4+0xa4>
 8000c74:	4606      	mov	r6, r0
 8000c76:	e6e3      	b.n	8000a40 <__udivmoddi4+0x64>
 8000c78:	4618      	mov	r0, r3
 8000c7a:	e6f8      	b.n	8000a6e <__udivmoddi4+0x92>
 8000c7c:	454b      	cmp	r3, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f8>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c88:	3801      	subs	r0, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f8>
 8000c8c:	4646      	mov	r6, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x28a>
 8000c90:	4620      	mov	r0, r4
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1e2>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b8>
 8000c9c:	3b02      	subs	r3, #2
 8000c9e:	4461      	add	r1, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x12c>
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	e709      	b.n	8000aba <__udivmoddi4+0xde>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x156>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <vApplicationGetIdleTaskMemory+0x2c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <vApplicationGetIdleTaskMemory+0x30>)
 8000cc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000030 	.word	0x20000030
 8000ce0:	20000084 	.word	0x20000084

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	BaseType_t ret = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f001 f9b5 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 fc33 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f000 fe91 	bl	8001a1c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000cfa:	f000 fdd5 	bl	80018a8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000cfe:	f000 fd37 	bl	8001770 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000d02:	f000 fc95 	bl	8001630 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d06:	f000 fcc9 	bl	800169c <MX_CAN2_Init>
  MX_SPI1_Init();
 8000d0a:	f000 fcfb 	bl	8001704 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000d0e:	f000 fd7f 	bl	8001810 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d12:	f000 fe17 	bl	8001944 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d16:	f000 fe4b 	bl	80019b0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


 //  HAL_TIM_Base_Start(&htim2);
 //  HAL_GPIO_WritePin(TRIG_PORT_GPIO2, TRIG_PIN2, GPIO_PIN_RESET);
   HAL_TIM_Base_Start(&htim4);
 8000d1a:	4846      	ldr	r0, [pc, #280]	; (8000e34 <main+0x150>)
 8000d1c:	f003 fa80 	bl	8004220 <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(TRIG_PORT_GPIO2, TRIG_PIN2, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d26:	4844      	ldr	r0, [pc, #272]	; (8000e38 <main+0x154>)
 8000d28:	f001 ffea 	bl	8002d00 <HAL_GPIO_WritePin>
   HAL_TIM_Base_Start(&htim6);
 8000d2c:	4843      	ldr	r0, [pc, #268]	; (8000e3c <main+0x158>)
 8000d2e:	f003 fa77 	bl	8004220 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT_GPIO, TRIG_PIN, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d38:	4841      	ldr	r0, [pc, #260]	; (8000e40 <main+0x15c>)
 8000d3a:	f001 ffe1 	bl	8002d00 <HAL_GPIO_WritePin>
 //  HAL_TIM_Base_Start(&htim7);
 //  HAL_GPIO_WritePin(TRIG_PORT_GPIO2, TRIG_PIN7, GPIO_PIN_RESET);

   /*##-Step1:Filter Configuration ###########################################*/
       CAN_filterConfig();
 8000d3e:	f000 ff33 	bl	8001ba8 <CAN_filterConfig>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d42:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <main+0x160>)
 8000d44:	463c      	mov	r4, r7
 8000d46:	461d      	mov	r5, r3
 8000d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d54:	463b      	mov	r3, r7
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fd5f 	bl	800481c <osThreadCreate>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a39      	ldr	r2, [pc, #228]	; (8000e48 <main+0x164>)
 8000d62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  	ret = xTaskCreate(vTask1_sensor1, "Ultrasonic_sensor 1 data", 240, NULL,1, NULL);
 8000d64:	2300      	movs	r3, #0
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	22f0      	movs	r2, #240	; 0xf0
 8000d70:	4936      	ldr	r1, [pc, #216]	; (8000e4c <main+0x168>)
 8000d72:	4837      	ldr	r0, [pc, #220]	; (8000e50 <main+0x16c>)
 8000d74:	f003 fec3 	bl	8004afe <xTaskCreate>
 8000d78:	62f8      	str	r0, [r7, #44]	; 0x2c
    configASSERT(ret);
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10a      	bne.n	8000d96 <main+0xb2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d84:	f383 8811 	msr	BASEPRI, r3
 8000d88:	f3bf 8f6f 	isb	sy
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d92:	bf00      	nop
 8000d94:	e7fe      	b.n	8000d94 <main+0xb0>
    ret = xTaskCreate(vTask2_sensor2, "Ultrasonic_sensor 1 data", 240, NULL, 1, NULL);
 8000d96:	2300      	movs	r3, #0
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	22f0      	movs	r2, #240	; 0xf0
 8000da2:	492a      	ldr	r1, [pc, #168]	; (8000e4c <main+0x168>)
 8000da4:	482b      	ldr	r0, [pc, #172]	; (8000e54 <main+0x170>)
 8000da6:	f003 feaa 	bl	8004afe <xTaskCreate>
 8000daa:	62f8      	str	r0, [r7, #44]	; 0x2c
    configASSERT(ret);
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10a      	bne.n	8000dc8 <main+0xe4>
	__asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000dc4:	bf00      	nop
 8000dc6:	e7fe      	b.n	8000dc6 <main+0xe2>
    ret = xTaskCreate(vTask3_CAN_send, "CAN_data_send", 240, NULL,1, NULL);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	22f0      	movs	r2, #240	; 0xf0
 8000dd4:	4920      	ldr	r1, [pc, #128]	; (8000e58 <main+0x174>)
 8000dd6:	4821      	ldr	r0, [pc, #132]	; (8000e5c <main+0x178>)
 8000dd8:	f003 fe91 	bl	8004afe <xTaskCreate>
 8000ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
    configASSERT(ret);
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10a      	bne.n	8000dfa <main+0x116>
	__asm volatile
 8000de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de8:	f383 8811 	msr	BASEPRI, r3
 8000dec:	f3bf 8f6f 	isb	sy
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	623b      	str	r3, [r7, #32]
}
 8000df6:	bf00      	nop
 8000df8:	e7fe      	b.n	8000df8 <main+0x114>
    ret = xTaskCreate(vTask4_displacement, "Accellerometer data ", 240, NULL,1, NULL);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	22f0      	movs	r2, #240	; 0xf0
 8000e06:	4916      	ldr	r1, [pc, #88]	; (8000e60 <main+0x17c>)
 8000e08:	4816      	ldr	r0, [pc, #88]	; (8000e64 <main+0x180>)
 8000e0a:	f003 fe78 	bl	8004afe <xTaskCreate>
 8000e0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        	configASSERT(ret);
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10a      	bne.n	8000e2c <main+0x148>
	__asm volatile
 8000e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1a:	f383 8811 	msr	BASEPRI, r3
 8000e1e:	f3bf 8f6f 	isb	sy
 8000e22:	f3bf 8f4f 	dsb	sy
 8000e26:	61fb      	str	r3, [r7, #28]
}
 8000e28:	bf00      	nop
 8000e2a:	e7fe      	b.n	8000e2a <main+0x146>
  /* Start scheduler */
    vTaskStartScheduler();
 8000e2c:	f003 ffd2 	bl	8004dd4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0x14c>
 8000e32:	bf00      	nop
 8000e34:	200003c0 	.word	0x200003c0
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	20000408 	.word	0x20000408
 8000e40:	40020000 	.word	0x40020000
 8000e44:	08005d7c 	.word	0x08005d7c
 8000e48:	2000032c 	.word	0x2000032c
 8000e4c:	08005d38 	.word	0x08005d38
 8000e50:	08000e69 	.word	0x08000e69
 8000e54:	08001091 	.word	0x08001091
 8000e58:	08005d54 	.word	0x08005d54
 8000e5c:	080012a1 	.word	0x080012a1
 8000e60:	08005d64 	.word	0x08005d64
 8000e64:	08001379 	.word	0x08001379

08000e68 <vTask1_sensor1>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void vTask1_sensor1( void *pvParameters ){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
		while(1){


		HAL_GPIO_WritePin(TRIG_PORT_GPIO2, TRIG_PIN2, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	487c      	ldr	r0, [pc, #496]	; (8001068 <vTask1_sensor1+0x200>)
 8000e78:	f001 ff42 	bl	8002d00 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000e7c:	4b7b      	ldr	r3, [pc, #492]	; (800106c <vTask1_sensor1+0x204>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24

		    while (__HAL_TIM_GET_COUNTER (&htim4) < 10);
 8000e84:	bf00      	nop
 8000e86:	4b79      	ldr	r3, [pc, #484]	; (800106c <vTask1_sensor1+0x204>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	d9fa      	bls.n	8000e86 <vTask1_sensor1+0x1e>
		    HAL_GPIO_WritePin(TRIG_PORT_GPIO2, TRIG_PIN2, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	4874      	ldr	r0, [pc, #464]	; (8001068 <vTask1_sensor1+0x200>)
 8000e98:	f001 ff32 	bl	8002d00 <HAL_GPIO_WritePin>

		    pMillis = HAL_GetTick();
 8000e9c:	f001 f944 	bl	8002128 <HAL_GetTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a73      	ldr	r2, [pc, #460]	; (8001070 <vTask1_sensor1+0x208>)
 8000ea4:	6013      	str	r3, [r2, #0]

		    while (!(HAL_GPIO_ReadPin (ECHO_PORT_GPIO2, ECHO_PIN2)) && pMillis + 5 >  HAL_GetTick());
 8000ea6:	bf00      	nop
 8000ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eac:	486e      	ldr	r0, [pc, #440]	; (8001068 <vTask1_sensor1+0x200>)
 8000eae:	f001 ff0f 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d107      	bne.n	8000ec8 <vTask1_sensor1+0x60>
 8000eb8:	4b6d      	ldr	r3, [pc, #436]	; (8001070 <vTask1_sensor1+0x208>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	1d5c      	adds	r4, r3, #5
 8000ebe:	f001 f933 	bl	8002128 <HAL_GetTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	d8ef      	bhi.n	8000ea8 <vTask1_sensor1+0x40>
		    sensor2_Triger_Time = __HAL_TIM_GET_COUNTER (&htim4);
 8000ec8:	4b68      	ldr	r3, [pc, #416]	; (800106c <vTask1_sensor1+0x204>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	4a69      	ldr	r2, [pc, #420]	; (8001074 <vTask1_sensor1+0x20c>)
 8000ed0:	6013      	str	r3, [r2, #0]
if(sensor2_Triger_Time<100){sensor2_Triger_Time=0;sensor2_Echo_Time=0;}
 8000ed2:	4b68      	ldr	r3, [pc, #416]	; (8001074 <vTask1_sensor1+0x20c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b63      	cmp	r3, #99	; 0x63
 8000ed8:	d805      	bhi.n	8000ee6 <vTask1_sensor1+0x7e>
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <vTask1_sensor1+0x20c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	4b65      	ldr	r3, [pc, #404]	; (8001078 <vTask1_sensor1+0x210>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
		    pMillis = HAL_GetTick();
 8000ee6:	f001 f91f 	bl	8002128 <HAL_GetTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a60      	ldr	r2, [pc, #384]	; (8001070 <vTask1_sensor1+0x208>)
 8000eee:	6013      	str	r3, [r2, #0]

		    while ((HAL_GPIO_ReadPin (ECHO_PORT_GPIO2, ECHO_PIN2)) && pMillis + 10 > HAL_GetTick());
 8000ef0:	bf00      	nop
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	485c      	ldr	r0, [pc, #368]	; (8001068 <vTask1_sensor1+0x200>)
 8000ef8:	f001 feea 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d008      	beq.n	8000f14 <vTask1_sensor1+0xac>
 8000f02:	4b5b      	ldr	r3, [pc, #364]	; (8001070 <vTask1_sensor1+0x208>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f103 040a 	add.w	r4, r3, #10
 8000f0a:	f001 f90d 	bl	8002128 <HAL_GetTick>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	429c      	cmp	r4, r3
 8000f12:	d8ee      	bhi.n	8000ef2 <vTask1_sensor1+0x8a>
		    sensor2_Echo_Time = __HAL_TIM_GET_COUNTER (&htim4);
 8000f14:	4b55      	ldr	r3, [pc, #340]	; (800106c <vTask1_sensor1+0x204>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	4a57      	ldr	r2, [pc, #348]	; (8001078 <vTask1_sensor1+0x210>)
 8000f1c:	6013      	str	r3, [r2, #0]

		    distance_by_sensor2 =((((((sensor2_Echo_Time-sensor2_Triger_Time))/10)*(343/2))*0.0245)/2)/100;
 8000f1e:	4b56      	ldr	r3, [pc, #344]	; (8001078 <vTask1_sensor1+0x210>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <vTask1_sensor1+0x20c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a54      	ldr	r2, [pc, #336]	; (800107c <vTask1_sensor1+0x214>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	22ab      	movs	r2, #171	; 0xab
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fa8c 	bl	8000454 <__aeabi_ui2d>
 8000f3c:	a348      	add	r3, pc, #288	; (adr r3, 8001060 <vTask1_sensor1+0x1f8>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fb01 	bl	8000548 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f56:	f7ff fc21 	bl	800079c <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b46      	ldr	r3, [pc, #280]	; (8001080 <vTask1_sensor1+0x218>)
 8000f68:	f7ff fc18 	bl	800079c <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fcfa 	bl	800096c <__aeabi_d2uiz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a42      	ldr	r2, [pc, #264]	; (8001084 <vTask1_sensor1+0x21c>)
 8000f7c:	6013      	str	r3, [r2, #0]

		    if(distance_by_sensor2 >=70 )
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <vTask1_sensor1+0x21c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b45      	cmp	r3, #69	; 0x45
 8000f84:	d918      	bls.n	8000fb8 <vTask1_sensor1+0x150>
		   		{
		   			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	483e      	ldr	r0, [pc, #248]	; (8001088 <vTask1_sensor1+0x220>)
 8000f8e:	f001 feb7 	bl	8002d00 <HAL_GPIO_WritePin>
		   			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f98:	483b      	ldr	r0, [pc, #236]	; (8001088 <vTask1_sensor1+0x220>)
 8000f9a:	f001 feb1 	bl	8002d00 <HAL_GPIO_WritePin>
		   			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	4838      	ldr	r0, [pc, #224]	; (8001088 <vTask1_sensor1+0x220>)
 8000fa6:	f001 feab 	bl	8002d00 <HAL_GPIO_WritePin>
		   			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb0:	4835      	ldr	r0, [pc, #212]	; (8001088 <vTask1_sensor1+0x220>)
 8000fb2:	f001 fea5 	bl	8002d00 <HAL_GPIO_WritePin>
 8000fb6:	e75b      	b.n	8000e70 <vTask1_sensor1+0x8>
		   		}

		   		else if ((distance_by_sensor2 >= 50)&&(distance_by_sensor2 < 70))
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <vTask1_sensor1+0x21c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b31      	cmp	r3, #49	; 0x31
 8000fbe:	d909      	bls.n	8000fd4 <vTask1_sensor1+0x16c>
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <vTask1_sensor1+0x21c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b45      	cmp	r3, #69	; 0x45
 8000fc6:	d805      	bhi.n	8000fd4 <vTask1_sensor1+0x16c>
		   		{
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fcc:	482e      	ldr	r0, [pc, #184]	; (8001088 <vTask1_sensor1+0x220>)
 8000fce:	f001 feb0 	bl	8002d32 <HAL_GPIO_TogglePin>
 8000fd2:	e043      	b.n	800105c <vTask1_sensor1+0x1f4>
		   			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
		   		}

		   		else if ((distance_by_sensor2 >= 25)&&(distance_by_sensor2 < 50))
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <vTask1_sensor1+0x21c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b18      	cmp	r3, #24
 8000fda:	d90e      	bls.n	8000ffa <vTask1_sensor1+0x192>
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <vTask1_sensor1+0x21c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b31      	cmp	r3, #49	; 0x31
 8000fe2:	d80a      	bhi.n	8000ffa <vTask1_sensor1+0x192>
		   		{
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4827      	ldr	r0, [pc, #156]	; (8001088 <vTask1_sensor1+0x220>)
 8000fea:	f001 fea2 	bl	8002d32 <HAL_GPIO_TogglePin>
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4825      	ldr	r0, [pc, #148]	; (8001088 <vTask1_sensor1+0x220>)
 8000ff4:	f001 fe9d 	bl	8002d32 <HAL_GPIO_TogglePin>
 8000ff8:	e030      	b.n	800105c <vTask1_sensor1+0x1f4>

		   		}
		   		else if ((distance_by_sensor2 >= 10)&&(distance_by_sensor2 < 25))
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <vTask1_sensor1+0x21c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d913      	bls.n	800102a <vTask1_sensor1+0x1c2>
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <vTask1_sensor1+0x21c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b18      	cmp	r3, #24
 8001008:	d80f      	bhi.n	800102a <vTask1_sensor1+0x1c2>
		   		{
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	481e      	ldr	r0, [pc, #120]	; (8001088 <vTask1_sensor1+0x220>)
 8001010:	f001 fe8f 	bl	8002d32 <HAL_GPIO_TogglePin>
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001018:	481b      	ldr	r0, [pc, #108]	; (8001088 <vTask1_sensor1+0x220>)
 800101a:	f001 fe8a 	bl	8002d32 <HAL_GPIO_TogglePin>
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 800101e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001022:	4819      	ldr	r0, [pc, #100]	; (8001088 <vTask1_sensor1+0x220>)
 8001024:	f001 fe85 	bl	8002d32 <HAL_GPIO_TogglePin>
 8001028:	e018      	b.n	800105c <vTask1_sensor1+0x1f4>
		   		}

		   		else if (distance_by_sensor2 < 10)
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <vTask1_sensor1+0x21c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b09      	cmp	r3, #9
 8001030:	f63f af1e 	bhi.w	8000e70 <vTask1_sensor1+0x8>
		   		{
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <vTask1_sensor1+0x220>)
 800103a:	f001 fe7a 	bl	8002d32 <HAL_GPIO_TogglePin>
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <vTask1_sensor1+0x220>)
 8001044:	f001 fe75 	bl	8002d32 <HAL_GPIO_TogglePin>
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	480e      	ldr	r0, [pc, #56]	; (8001088 <vTask1_sensor1+0x220>)
 800104e:	f001 fe70 	bl	8002d32 <HAL_GPIO_TogglePin>
		   			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8001052:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001056:	480c      	ldr	r0, [pc, #48]	; (8001088 <vTask1_sensor1+0x220>)
 8001058:	f001 fe6b 	bl	8002d32 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(TRIG_PORT_GPIO2, TRIG_PIN2, GPIO_PIN_SET);
 800105c:	e708      	b.n	8000e70 <vTask1_sensor1+0x8>
 800105e:	bf00      	nop
 8001060:	2b020c4a 	.word	0x2b020c4a
 8001064:	3f991687 	.word	0x3f991687
 8001068:	40020800 	.word	0x40020800
 800106c:	200003c0 	.word	0x200003c0
 8001070:	20000498 	.word	0x20000498
 8001074:	200004a4 	.word	0x200004a4
 8001078:	200004a8 	.word	0x200004a8
 800107c:	cccccccd 	.word	0xcccccccd
 8001080:	40590000 	.word	0x40590000
 8001084:	200004b0 	.word	0x200004b0
 8001088:	40021000 	.word	0x40021000
 800108c:	00000000 	.word	0x00000000

08001090 <vTask2_sensor2>:


		}
		HAL_Delay(500);
		}
void vTask2_sensor2( void *pvParameters ){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	while(1){


	HAL_GPIO_WritePin(TRIG_PORT_GPIO, TRIG_PIN, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4878      	ldr	r0, [pc, #480]	; (8001280 <vTask2_sensor2+0x1f0>)
 80010a0:	f001 fe2e 	bl	8002d00 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim6, 0);
 80010a4:	4b77      	ldr	r3, [pc, #476]	; (8001284 <vTask2_sensor2+0x1f4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

	    while (__HAL_TIM_GET_COUNTER (&htim6) < 10);
 80010ac:	bf00      	nop
 80010ae:	4b75      	ldr	r3, [pc, #468]	; (8001284 <vTask2_sensor2+0x1f4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	d9fa      	bls.n	80010ae <vTask2_sensor2+0x1e>
	    HAL_GPIO_WritePin(TRIG_PORT_GPIO, TRIG_PIN, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	4870      	ldr	r0, [pc, #448]	; (8001280 <vTask2_sensor2+0x1f0>)
 80010c0:	f001 fe1e 	bl	8002d00 <HAL_GPIO_WritePin>

	    pMillis = HAL_GetTick();
 80010c4:	f001 f830 	bl	8002128 <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a6f      	ldr	r2, [pc, #444]	; (8001288 <vTask2_sensor2+0x1f8>)
 80010cc:	6013      	str	r3, [r2, #0]

	    while (!(HAL_GPIO_ReadPin (ECHO_PORT_GPIO, ECHO_PIN)) && pMillis + 5 >  HAL_GetTick());
 80010ce:	bf00      	nop
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	486a      	ldr	r0, [pc, #424]	; (8001280 <vTask2_sensor2+0x1f0>)
 80010d6:	f001 fdfb 	bl	8002cd0 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <vTask2_sensor2+0x60>
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <vTask2_sensor2+0x1f8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1d5c      	adds	r4, r3, #5
 80010e6:	f001 f81f 	bl	8002128 <HAL_GetTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	429c      	cmp	r4, r3
 80010ee:	d8ef      	bhi.n	80010d0 <vTask2_sensor2+0x40>
	    sensor1_Triger_Time = __HAL_TIM_GET_COUNTER (&htim6);
 80010f0:	4b64      	ldr	r3, [pc, #400]	; (8001284 <vTask2_sensor2+0x1f4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	4a65      	ldr	r2, [pc, #404]	; (800128c <vTask2_sensor2+0x1fc>)
 80010f8:	6013      	str	r3, [r2, #0]

	    pMillis = HAL_GetTick();
 80010fa:	f001 f815 	bl	8002128 <HAL_GetTick>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a61      	ldr	r2, [pc, #388]	; (8001288 <vTask2_sensor2+0x1f8>)
 8001102:	6013      	str	r3, [r2, #0]

	    while ((HAL_GPIO_ReadPin (ECHO_PORT_GPIO, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 8001104:	bf00      	nop
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	485d      	ldr	r0, [pc, #372]	; (8001280 <vTask2_sensor2+0x1f0>)
 800110c:	f001 fde0 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <vTask2_sensor2+0x98>
 8001116:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <vTask2_sensor2+0x1f8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f103 040a 	add.w	r4, r3, #10
 800111e:	f001 f803 	bl	8002128 <HAL_GetTick>
 8001122:	4603      	mov	r3, r0
 8001124:	429c      	cmp	r4, r3
 8001126:	d8ee      	bhi.n	8001106 <vTask2_sensor2+0x76>
	    sensor1_Echo_Time = __HAL_TIM_GET_COUNTER (&htim6);
 8001128:	4b56      	ldr	r3, [pc, #344]	; (8001284 <vTask2_sensor2+0x1f4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	4a58      	ldr	r2, [pc, #352]	; (8001290 <vTask2_sensor2+0x200>)
 8001130:	6013      	str	r3, [r2, #0]

	    distance_by_sensor1 =((((((sensor1_Echo_Time-sensor1_Triger_Time))/10)*(343/2))*0.0245)/2)/100;
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <vTask2_sensor2+0x200>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b55      	ldr	r3, [pc, #340]	; (800128c <vTask2_sensor2+0x1fc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <vTask2_sensor2+0x204>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	22ab      	movs	r2, #171	; 0xab
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f982 	bl	8000454 <__aeabi_ui2d>
 8001150:	a349      	add	r3, pc, #292	; (adr r3, 8001278 <vTask2_sensor2+0x1e8>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9f7 	bl	8000548 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800116a:	f7ff fb17 	bl	800079c <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <vTask2_sensor2+0x208>)
 800117c:	f7ff fb0e 	bl	800079c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fbf0 	bl	800096c <__aeabi_d2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <vTask2_sensor2+0x20c>)
 8001190:	6013      	str	r3, [r2, #0]

	    if(distance_by_sensor1 >=70 )
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <vTask2_sensor2+0x20c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b45      	cmp	r3, #69	; 0x45
 8001198:	d918      	bls.n	80011cc <vTask2_sensor2+0x13c>
	   		{
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a0:	4837      	ldr	r0, [pc, #220]	; (8001280 <vTask2_sensor2+0x1f0>)
 80011a2:	f001 fdad 	bl	8002d00 <HAL_GPIO_WritePin>
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ac:	4834      	ldr	r0, [pc, #208]	; (8001280 <vTask2_sensor2+0x1f0>)
 80011ae:	f001 fda7 	bl	8002d00 <HAL_GPIO_WritePin>
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	4831      	ldr	r0, [pc, #196]	; (8001280 <vTask2_sensor2+0x1f0>)
 80011ba:	f001 fda1 	bl	8002d00 <HAL_GPIO_WritePin>
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c4:	482e      	ldr	r0, [pc, #184]	; (8001280 <vTask2_sensor2+0x1f0>)
 80011c6:	f001 fd9b 	bl	8002d00 <HAL_GPIO_WritePin>
 80011ca:	e765      	b.n	8001098 <vTask2_sensor2+0x8>
	   		}

	   		else if ((distance_by_sensor1 >= 50)&&(distance_by_sensor1 < 70))
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <vTask2_sensor2+0x20c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b31      	cmp	r3, #49	; 0x31
 80011d2:	d909      	bls.n	80011e8 <vTask2_sensor2+0x158>
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <vTask2_sensor2+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b45      	cmp	r3, #69	; 0x45
 80011da:	d805      	bhi.n	80011e8 <vTask2_sensor2+0x158>
	   		{
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80011dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <vTask2_sensor2+0x1f0>)
 80011e2:	f001 fda6 	bl	8002d32 <HAL_GPIO_TogglePin>
 80011e6:	e043      	b.n	8001270 <vTask2_sensor2+0x1e0>
	   			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
	   		}

	   		else if ((distance_by_sensor1 >= 25)&&(distance_by_sensor1 < 50))
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <vTask2_sensor2+0x20c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b18      	cmp	r3, #24
 80011ee:	d90e      	bls.n	800120e <vTask2_sensor2+0x17e>
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <vTask2_sensor2+0x20c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b31      	cmp	r3, #49	; 0x31
 80011f6:	d80a      	bhi.n	800120e <vTask2_sensor2+0x17e>
	   		{
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	4820      	ldr	r0, [pc, #128]	; (8001280 <vTask2_sensor2+0x1f0>)
 80011fe:	f001 fd98 	bl	8002d32 <HAL_GPIO_TogglePin>
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	481e      	ldr	r0, [pc, #120]	; (8001280 <vTask2_sensor2+0x1f0>)
 8001208:	f001 fd93 	bl	8002d32 <HAL_GPIO_TogglePin>
 800120c:	e030      	b.n	8001270 <vTask2_sensor2+0x1e0>

	   		}
	   		else if ((distance_by_sensor1 >= 10)&&(distance_by_sensor1 < 25))
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <vTask2_sensor2+0x20c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b09      	cmp	r3, #9
 8001214:	d913      	bls.n	800123e <vTask2_sensor2+0x1ae>
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <vTask2_sensor2+0x20c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b18      	cmp	r3, #24
 800121c:	d80f      	bhi.n	800123e <vTask2_sensor2+0x1ae>
	   		{
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <vTask2_sensor2+0x1f0>)
 8001224:	f001 fd85 	bl	8002d32 <HAL_GPIO_TogglePin>
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8001228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <vTask2_sensor2+0x1f0>)
 800122e:	f001 fd80 	bl	8002d32 <HAL_GPIO_TogglePin>
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <vTask2_sensor2+0x1f0>)
 8001238:	f001 fd7b 	bl	8002d32 <HAL_GPIO_TogglePin>
 800123c:	e018      	b.n	8001270 <vTask2_sensor2+0x1e0>
	   		}

	   		else if (distance_by_sensor1 < 10)
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <vTask2_sensor2+0x20c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b09      	cmp	r3, #9
 8001244:	f63f af28 	bhi.w	8001098 <vTask2_sensor2+0x8>
	   		{
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8001248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <vTask2_sensor2+0x1f0>)
 800124e:	f001 fd70 	bl	8002d32 <HAL_GPIO_TogglePin>
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001256:	480a      	ldr	r0, [pc, #40]	; (8001280 <vTask2_sensor2+0x1f0>)
 8001258:	f001 fd6b 	bl	8002d32 <HAL_GPIO_TogglePin>
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800125c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <vTask2_sensor2+0x1f0>)
 8001262:	f001 fd66 	bl	8002d32 <HAL_GPIO_TogglePin>
	   			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8001266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <vTask2_sensor2+0x1f0>)
 800126c:	f001 fd61 	bl	8002d32 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(TRIG_PORT_GPIO, TRIG_PIN, GPIO_PIN_SET);
 8001270:	e712      	b.n	8001098 <vTask2_sensor2+0x8>
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	2b020c4a 	.word	0x2b020c4a
 800127c:	3f991687 	.word	0x3f991687
 8001280:	40020000 	.word	0x40020000
 8001284:	20000408 	.word	0x20000408
 8001288:	20000498 	.word	0x20000498
 800128c:	2000049c 	.word	0x2000049c
 8001290:	200004a0 	.word	0x200004a0
 8001294:	cccccccd 	.word	0xcccccccd
 8001298:	40590000 	.word	0x40590000
 800129c:	200004ac 	.word	0x200004ac

080012a0 <vTask3_CAN_send>:


	}
	HAL_Delay(500);
	}
void vTask3_CAN_send( void *pvParameters ){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80012a8:	482d      	ldr	r0, [pc, #180]	; (8001360 <vTask3_CAN_send+0xc0>)
 80012aa:	f001 f949 	bl	8002540 <HAL_CAN_Start>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <vTask3_CAN_send+0x18>
	     	  {
	     		/* Start Error */
	     		Error_Handler();
 80012b4:	f000 fce0 	bl	8001c78 <Error_Handler>
	     	  }
	   /*##-Step3:Activate CAN RX notification #######################################*/
	 	 if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80012b8:	2102      	movs	r1, #2
 80012ba:	4829      	ldr	r0, [pc, #164]	; (8001360 <vTask3_CAN_send+0xc0>)
 80012bc:	f001 fa5f 	bl	800277e <HAL_CAN_ActivateNotification>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <vTask3_CAN_send+0x2a>
	 	{
	 	  // Notification Error
	 	  Error_Handler();
 80012c6:	f000 fcd7 	bl	8001c78 <Error_Handler>
	 	}
		  TxHeader.StdId = 0x123;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <vTask3_CAN_send+0xc4>)
 80012cc:	f240 1223 	movw	r2, #291	; 0x123
 80012d0:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <vTask3_CAN_send+0xc4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <vTask3_CAN_send+0xc4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 2;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <vTask3_CAN_send+0xc4>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <vTask3_CAN_send+0xc4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	751a      	strb	r2, [r3, #20]
	while(1){
	  {
		    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80012ea:	2101      	movs	r1, #1
 80012ec:	481e      	ldr	r0, [pc, #120]	; (8001368 <vTask3_CAN_send+0xc8>)
 80012ee:	f001 fcef 	bl	8002cd0 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d1f8      	bne.n	80012ea <vTask3_CAN_send+0x4a>
			      {
		    	HAL_Delay(50);//Debouncing Delay
 80012f8:	2032      	movs	r0, #50	; 0x32
 80012fa:	f000 ff21 	bl	8002140 <HAL_Delay>
		    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80012fe:	2101      	movs	r1, #1
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <vTask3_CAN_send+0xc8>)
 8001302:	f001 fce5 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d1ee      	bne.n	80012ea <vTask3_CAN_send+0x4a>
		    	{
						if (ubKeyNumber == 0x4)
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <vTask3_CAN_send+0xcc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d103      	bne.n	800131c <vTask3_CAN_send+0x7c>
							{
							  ubKeyNumber = 0x00;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <vTask3_CAN_send+0xcc>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e7e6      	b.n	80012ea <vTask3_CAN_send+0x4a>
							}
						else
							{
							  LED_Display(++ubKeyNumber);
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <vTask3_CAN_send+0xcc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <vTask3_CAN_send+0xcc>)
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <vTask3_CAN_send+0xcc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fc5d 	bl	8001bec <LED_Display>
							  /* Set the data to be transmitted */
							  TxData[0] = ubKeyNumber;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <vTask3_CAN_send+0xcc>)
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <vTask3_CAN_send+0xd0>)
 8001338:	701a      	strb	r2, [r3, #0]
							  TxData[1] = 0xAD;
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <vTask3_CAN_send+0xd0>)
 800133c:	22ad      	movs	r2, #173	; 0xad
 800133e:	705a      	strb	r2, [r3, #1]

							  /* Start the Transmission process */
							  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <vTask3_CAN_send+0xd4>)
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <vTask3_CAN_send+0xd0>)
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <vTask3_CAN_send+0xc4>)
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <vTask3_CAN_send+0xc0>)
 8001348:	f001 f93e 	bl	80025c8 <HAL_CAN_AddTxMessage>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <vTask3_CAN_send+0xb6>
								  {
									/* Transmission request Error */
									Error_Handler();
 8001352:	f000 fc91 	bl	8001c78 <Error_Handler>
								  }
					HAL_Delay(100);//Delay just for better Tuning
 8001356:	2064      	movs	r0, #100	; 0x64
 8001358:	f000 fef2 	bl	8002140 <HAL_Delay>
		    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800135c:	e7c5      	b.n	80012ea <vTask3_CAN_send+0x4a>
 800135e:	bf00      	nop
 8001360:	20000284 	.word	0x20000284
 8001364:	200004b8 	.word	0x200004b8
 8001368:	40020000 	.word	0x40020000
 800136c:	200004b4 	.word	0x200004b4
 8001370:	200004d0 	.word	0x200004d0
 8001374:	200004d8 	.word	0x200004d8

08001378 <vTask4_displacement>:
	    /* USER CODE end */
	  }
	}
	HAL_Delay(500);
}
void vTask4_displacement( void *pvParameters ){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	while(1){
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);//CS Pin Low
 8001380:	2200      	movs	r2, #0
 8001382:	2108      	movs	r1, #8
 8001384:	486c      	ldr	r0, [pc, #432]	; (8001538 <vTask4_displacement+0x1c0>)
 8001386:	f001 fcbb 	bl	8002d00 <HAL_GPIO_WritePin>
		  TxBuf[0]=0x20;//Address of Register
 800138a:	4b6c      	ldr	r3, [pc, #432]	; (800153c <vTask4_displacement+0x1c4>)
 800138c:	2220      	movs	r2, #32
 800138e:	701a      	strb	r2, [r3, #0]
		  TxBuf[1]=0x37;//Data for Register
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <vTask4_displacement+0x1c4>)
 8001392:	2237      	movs	r2, #55	; 0x37
 8001394:	705a      	strb	r2, [r3, #1]
		  HAL_SPI_Transmit(&hspi1, TxBuf, 2, 50);
 8001396:	2332      	movs	r3, #50	; 0x32
 8001398:	2202      	movs	r2, #2
 800139a:	4968      	ldr	r1, [pc, #416]	; (800153c <vTask4_displacement+0x1c4>)
 800139c:	4868      	ldr	r0, [pc, #416]	; (8001540 <vTask4_displacement+0x1c8>)
 800139e:	f002 f9d0 	bl	8003742 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);//CS Pin High
 80013a2:	2201      	movs	r2, #1
 80013a4:	2108      	movs	r1, #8
 80013a6:	4864      	ldr	r0, [pc, #400]	; (8001538 <vTask4_displacement+0x1c0>)
 80013a8:	f001 fcaa 	bl	8002d00 <HAL_GPIO_WritePin>

		  /* Infinite loop */
		  /* USER CODE BEGIN WHILE */
		  while (1)
		  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);//CS Pin Low
 80013ac:	2200      	movs	r2, #0
 80013ae:	2108      	movs	r1, #8
 80013b0:	4861      	ldr	r0, [pc, #388]	; (8001538 <vTask4_displacement+0x1c0>)
 80013b2:	f001 fca5 	bl	8002d00 <HAL_GPIO_WritePin>
			TxBuf[0]=0x28|ReadFlag;//Read Multi Byte Address of Register for X
 80013b6:	4b63      	ldr	r3, [pc, #396]	; (8001544 <vTask4_displacement+0x1cc>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b5e      	ldr	r3, [pc, #376]	; (800153c <vTask4_displacement+0x1c4>)
 80013c2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, TxBuf, 1, 50);
 80013c4:	2332      	movs	r3, #50	; 0x32
 80013c6:	2201      	movs	r2, #1
 80013c8:	495c      	ldr	r1, [pc, #368]	; (800153c <vTask4_displacement+0x1c4>)
 80013ca:	485d      	ldr	r0, [pc, #372]	; (8001540 <vTask4_displacement+0x1c8>)
 80013cc:	f002 f9b9 	bl	8003742 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, Return, 2, 50);
 80013d0:	2332      	movs	r3, #50	; 0x32
 80013d2:	2202      	movs	r2, #2
 80013d4:	495c      	ldr	r1, [pc, #368]	; (8001548 <vTask4_displacement+0x1d0>)
 80013d6:	485a      	ldr	r0, [pc, #360]	; (8001540 <vTask4_displacement+0x1c8>)
 80013d8:	f002 faef 	bl	80039ba <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);//CS Pin High
 80013dc:	2201      	movs	r2, #1
 80013de:	2108      	movs	r1, #8
 80013e0:	4855      	ldr	r0, [pc, #340]	; (8001538 <vTask4_displacement+0x1c0>)
 80013e2:	f001 fc8d 	bl	8002d00 <HAL_GPIO_WritePin>

			Rx_x= ((Return[1]<<8)|Return[0])/100;
 80013e6:	4b58      	ldr	r3, [pc, #352]	; (8001548 <vTask4_displacement+0x1d0>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4a56      	ldr	r2, [pc, #344]	; (8001548 <vTask4_displacement+0x1d0>)
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	4a56      	ldr	r2, [pc, #344]	; (800154c <vTask4_displacement+0x1d4>)
 80013f4:	fb82 1203 	smull	r1, r2, r2, r3
 80013f8:	1152      	asrs	r2, r2, #5
 80013fa:	17db      	asrs	r3, r3, #31
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <vTask4_displacement+0x1d8>)
 8001402:	801a      	strh	r2, [r3, #0]
			if((Rx_x>=50) && (Rx_x<=5000))
 8001404:	4b52      	ldr	r3, [pc, #328]	; (8001550 <vTask4_displacement+0x1d8>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2b31      	cmp	r3, #49	; 0x31
 800140a:	d90b      	bls.n	8001424 <vTask4_displacement+0xac>
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <vTask4_displacement+0x1d8>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d805      	bhi.n	8001424 <vTask4_displacement+0xac>
					    {
					    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2,SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2104      	movs	r1, #4
 800141c:	4846      	ldr	r0, [pc, #280]	; (8001538 <vTask4_displacement+0x1c0>)
 800141e:	f001 fc6f 	bl	8002d00 <HAL_GPIO_WritePin>
 8001422:	e004      	b.n	800142e <vTask4_displacement+0xb6>
					    }
					else
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2,RESET);//LED
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	4843      	ldr	r0, [pc, #268]	; (8001538 <vTask4_displacement+0x1c0>)
 800142a:	f001 fc69 	bl	8002d00 <HAL_GPIO_WritePin>



			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);//CS Pin Low
 800142e:	2200      	movs	r2, #0
 8001430:	2108      	movs	r1, #8
 8001432:	4841      	ldr	r0, [pc, #260]	; (8001538 <vTask4_displacement+0x1c0>)
 8001434:	f001 fc64 	bl	8002d00 <HAL_GPIO_WritePin>
			TxBuf[0]=0x2A|ReadFlag;//Read Multi Byte Address of Register for Y
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <vTask4_displacement+0x1cc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <vTask4_displacement+0x1c4>)
 8001444:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, TxBuf, 1, 50);
 8001446:	2332      	movs	r3, #50	; 0x32
 8001448:	2201      	movs	r2, #1
 800144a:	493c      	ldr	r1, [pc, #240]	; (800153c <vTask4_displacement+0x1c4>)
 800144c:	483c      	ldr	r0, [pc, #240]	; (8001540 <vTask4_displacement+0x1c8>)
 800144e:	f002 f978 	bl	8003742 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, Return, 2, 50);
 8001452:	2332      	movs	r3, #50	; 0x32
 8001454:	2202      	movs	r2, #2
 8001456:	493c      	ldr	r1, [pc, #240]	; (8001548 <vTask4_displacement+0x1d0>)
 8001458:	4839      	ldr	r0, [pc, #228]	; (8001540 <vTask4_displacement+0x1c8>)
 800145a:	f002 faae 	bl	80039ba <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);//CS Pin High*/
 800145e:	2201      	movs	r2, #1
 8001460:	2108      	movs	r1, #8
 8001462:	4835      	ldr	r0, [pc, #212]	; (8001538 <vTask4_displacement+0x1c0>)
 8001464:	f001 fc4c 	bl	8002d00 <HAL_GPIO_WritePin>

			Rx_y= ((Return[1]<<8)|Return[0])/100;
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <vTask4_displacement+0x1d0>)
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	4a36      	ldr	r2, [pc, #216]	; (8001548 <vTask4_displacement+0x1d0>)
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	4a35      	ldr	r2, [pc, #212]	; (800154c <vTask4_displacement+0x1d4>)
 8001476:	fb82 1203 	smull	r1, r2, r2, r3
 800147a:	1152      	asrs	r2, r2, #5
 800147c:	17db      	asrs	r3, r3, #31
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <vTask4_displacement+0x1dc>)
 8001484:	801a      	strh	r2, [r3, #0]
			if((Rx_y<=700) && (Rx_y<=5000))
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <vTask4_displacement+0x1dc>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800148e:	d80b      	bhi.n	80014a8 <vTask4_displacement+0x130>
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <vTask4_displacement+0x1dc>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d805      	bhi.n	80014a8 <vTask4_displacement+0x130>
				    {
				    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2110      	movs	r1, #16
 80014a0:	4825      	ldr	r0, [pc, #148]	; (8001538 <vTask4_displacement+0x1c0>)
 80014a2:	f001 fc2d 	bl	8002d00 <HAL_GPIO_WritePin>
 80014a6:	e004      	b.n	80014b2 <vTask4_displacement+0x13a>
				    }
				else
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,RESET);//led2
 80014a8:	2200      	movs	r2, #0
 80014aa:	2110      	movs	r1, #16
 80014ac:	4822      	ldr	r0, [pc, #136]	; (8001538 <vTask4_displacement+0x1c0>)
 80014ae:	f001 fc27 	bl	8002d00 <HAL_GPIO_WritePin>



			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);//CS Pin Low
 80014b2:	2200      	movs	r2, #0
 80014b4:	2108      	movs	r1, #8
 80014b6:	4820      	ldr	r0, [pc, #128]	; (8001538 <vTask4_displacement+0x1c0>)
 80014b8:	f001 fc22 	bl	8002d00 <HAL_GPIO_WritePin>
			TxBuf[0]=0x2C|ReadFlag;//Read Multi Byte Address of Register for Z
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <vTask4_displacement+0x1cc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <vTask4_displacement+0x1c4>)
 80014c8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, TxBuf, 1, 50);
 80014ca:	2332      	movs	r3, #50	; 0x32
 80014cc:	2201      	movs	r2, #1
 80014ce:	491b      	ldr	r1, [pc, #108]	; (800153c <vTask4_displacement+0x1c4>)
 80014d0:	481b      	ldr	r0, [pc, #108]	; (8001540 <vTask4_displacement+0x1c8>)
 80014d2:	f002 f936 	bl	8003742 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, Return, 2, 50);
 80014d6:	2332      	movs	r3, #50	; 0x32
 80014d8:	2202      	movs	r2, #2
 80014da:	491b      	ldr	r1, [pc, #108]	; (8001548 <vTask4_displacement+0x1d0>)
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <vTask4_displacement+0x1c8>)
 80014de:	f002 fa6c 	bl	80039ba <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);//CS Pin High
 80014e2:	2201      	movs	r2, #1
 80014e4:	2108      	movs	r1, #8
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <vTask4_displacement+0x1c0>)
 80014e8:	f001 fc0a 	bl	8002d00 <HAL_GPIO_WritePin>

			Rx_z= ((Return[1]<<8)|Return[0])/100;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <vTask4_displacement+0x1d0>)
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <vTask4_displacement+0x1d0>)
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <vTask4_displacement+0x1d4>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1152      	asrs	r2, r2, #5
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <vTask4_displacement+0x1e0>)
 8001508:	801a      	strh	r2, [r3, #0]
			if((Rx_z>=180) && (Rx_z<=5000))
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <vTask4_displacement+0x1e0>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2bb3      	cmp	r3, #179	; 0xb3
 8001510:	d90b      	bls.n	800152a <vTask4_displacement+0x1b2>
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <vTask4_displacement+0x1e0>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d805      	bhi.n	800152a <vTask4_displacement+0x1b2>
					    {
					    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5,SET);//led5
 800151e:	2201      	movs	r2, #1
 8001520:	2120      	movs	r1, #32
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <vTask4_displacement+0x1c0>)
 8001524:	f001 fbec 	bl	8002d00 <HAL_GPIO_WritePin>
 8001528:	e004      	b.n	8001534 <vTask4_displacement+0x1bc>
					    }
					else
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5,RESET);//led5*/
 800152a:	2200      	movs	r2, #0
 800152c:	2120      	movs	r1, #32
 800152e:	4802      	ldr	r0, [pc, #8]	; (8001538 <vTask4_displacement+0x1c0>)
 8001530:	f001 fbe6 	bl	8002d00 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);//CS Pin Low
 8001534:	e73a      	b.n	80013ac <vTask4_displacement+0x34>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	200004e4 	.word	0x200004e4
 8001540:	200002d4 	.word	0x200002d4
 8001544:	20000000 	.word	0x20000000
 8001548:	200004dc 	.word	0x200004dc
 800154c:	51eb851f 	.word	0x51eb851f
 8001550:	200004de 	.word	0x200004de
 8001554:	200004e0 	.word	0x200004e0
 8001558:	200004e2 	.word	0x200004e2

0800155c <SystemClock_Config>:
		}
	displacement+=Rx_y;
	HAL_Delay(500);
	}
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fbca 	bl	8005d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <SystemClock_Config+0xcc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <SystemClock_Config+0xd0>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	2310      	movs	r3, #16
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2302      	movs	r3, #2
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015cc:	2308      	movs	r3, #8
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80015d0:	2360      	movs	r3, #96	; 0x60
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d8:	2304      	movs	r3, #4
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fbc1 	bl	8002d68 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015ec:	f000 fb44 	bl	8001c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2302      	movs	r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2103      	movs	r1, #3
 800160e:	4618      	mov	r0, r3
 8001610:	f001 fe22 	bl	8003258 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161a:	f000 fb2d 	bl	8001c78 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	; 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_CAN1_Init+0x64>)
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <MX_CAN1_Init+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_CAN1_Init+0x64>)
 800163c:	220c      	movs	r2, #12
 800163e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_CAN1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_CAN1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_CAN1_Init+0x64>)
 800164e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001652:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_CAN1_Init+0x64>)
 8001656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800165a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_CAN1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_CAN1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_CAN1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_CAN1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_CAN1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_CAN1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_CAN1_Init+0x64>)
 8001682:	f000 fd81 	bl	8002188 <HAL_CAN_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800168c:	f000 faf4 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000284 	.word	0x20000284
 8001698:	40006400 	.word	0x40006400

0800169c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_CAN2_Init+0x60>)
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <MX_CAN2_Init+0x64>)
 80016a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 56;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_CAN2_Init+0x60>)
 80016a8:	2238      	movs	r2, #56	; 0x38
 80016aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_CAN2_Init+0x60>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_CAN2_Init+0x60>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_CAN2_Init+0x60>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_CAN2_Init+0x60>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <MX_CAN2_Init+0x60>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_CAN2_Init+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_CAN2_Init+0x60>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_CAN2_Init+0x60>)
 80016d8:	2200      	movs	r2, #0
 80016da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_CAN2_Init+0x60>)
 80016de:	2200      	movs	r2, #0
 80016e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_CAN2_Init+0x60>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_CAN2_Init+0x60>)
 80016ea:	f000 fd4d 	bl	8002188 <HAL_CAN_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80016f4:	f000 fac0 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200002ac 	.word	0x200002ac
 8001700:	40006800 	.word	0x40006800

08001704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_SPI1_Init+0x64>)
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <MX_SPI1_Init+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0x64>)
 8001730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0x64>)
 8001750:	220a      	movs	r2, #10
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_SPI1_Init+0x64>)
 8001756:	f001 ff6b 	bl	8003630 <HAL_SPI_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001760:	f000 fa8a 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200002d4 	.word	0x200002d4
 800176c:	40013000 	.word	0x40013000

08001770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_TIM1_Init+0x98>)
 800178e:	4a1f      	ldr	r2, [pc, #124]	; (800180c <MX_TIM1_Init+0x9c>)
 8001790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_TIM1_Init+0x98>)
 8001794:	2253      	movs	r2, #83	; 0x53
 8001796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_TIM1_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_TIM1_Init+0x98>)
 80017a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_TIM1_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_TIM1_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_TIM1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017b8:	4813      	ldr	r0, [pc, #76]	; (8001808 <MX_TIM1_Init+0x98>)
 80017ba:	f002 fce1 	bl	8004180 <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80017c4:	f000 fa58 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4619      	mov	r1, r3
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_TIM1_Init+0x98>)
 80017d6:	f002 fd8b 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017e0:	f000 fa4a 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_TIM1_Init+0x98>)
 80017f2:	f002 ff7f 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017fc:	f000 fa3c 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000330 	.word	0x20000330
 800180c:	40010000 	.word	0x40010000

08001810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_TIM2_Init+0x94>)
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001836:	2210      	movs	r2, #16
 8001838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_TIM2_Init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_TIM2_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001856:	f002 fc93 	bl	8004180 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001860:	f000 fa0a 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_TIM2_Init+0x94>)
 8001872:	f002 fd3d 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800187c:	f000 f9fc 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_TIM2_Init+0x94>)
 800188e:	f002 ff31 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001898:	f000 f9ee 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000378 	.word	0x20000378

080018a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_TIM4_Init+0x94>)
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <MX_TIM4_Init+0x98>)
 80018c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_TIM4_Init+0x94>)
 80018cc:	220f      	movs	r2, #15
 80018ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_TIM4_Init+0x94>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_TIM4_Init+0x94>)
 80018d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_TIM4_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_TIM4_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <MX_TIM4_Init+0x94>)
 80018ec:	f002 fc48 	bl	8004180 <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80018f6:	f000 f9bf 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM4_Init+0x94>)
 8001908:	f002 fcf2 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001912:	f000 f9b1 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_TIM4_Init+0x94>)
 8001924:	f002 fee6 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800192e:	f000 f9a3 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200003c0 	.word	0x200003c0
 8001940:	40000800 	.word	0x40000800

08001944 <MX_TIM6_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM6_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_TIM6_Init+0x64>)
 8001954:	4a15      	ldr	r2, [pc, #84]	; (80019ac <MX_TIM6_Init+0x68>)
 8001956:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_TIM6_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_TIM6_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_TIM6_Init+0x64>)
 8001966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_TIM6_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_TIM6_Init+0x64>)
 8001974:	f002 fc04 	bl	8004180 <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800197e:	f000 f97b 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_TIM6_Init+0x64>)
 8001990:	f002 feb0 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800199a:	f000 f96d 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000408 	.word	0x20000408
 80019ac:	40001000 	.word	0x40001000

080019b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <MX_TIM7_Init+0x68>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019e0:	f002 fbce 	bl	8004180 <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80019ea:	f000 f945 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019fc:	f002 fe7a 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a06:	f000 f937 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000450 	.word	0x20000450
 8001a18:	40001400 	.word	0x40001400

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a41      	ldr	r2, [pc, #260]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a3a      	ldr	r2, [pc, #232]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <MX_GPIO_Init+0x178>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001ada:	2200      	movs	r2, #0
 8001adc:	f64f 013c 	movw	r1, #63548	; 0xf83c
 8001ae0:	482d      	ldr	r0, [pc, #180]	; (8001b98 <MX_GPIO_Init+0x17c>)
 8001ae2:	f001 f90d 	bl	8002d00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001aec:	482b      	ldr	r0, [pc, #172]	; (8001b9c <MX_GPIO_Init+0x180>)
 8001aee:	f001 f907 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af8:	4829      	ldr	r0, [pc, #164]	; (8001ba0 <MX_GPIO_Init+0x184>)
 8001afa:	f001 f901 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001afe:	f64f 033c 	movw	r3, #63548	; 0xf83c
 8001b02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4820      	ldr	r0, [pc, #128]	; (8001b98 <MX_GPIO_Init+0x17c>)
 8001b18:	f000 ff3e 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001b1c:	2313      	movs	r3, #19
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	481d      	ldr	r0, [pc, #116]	; (8001ba4 <MX_GPIO_Init+0x188>)
 8001b30:	f000 ff32 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b34:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_GPIO_Init+0x180>)
 8001b4e:	f000 ff23 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_GPIO_Init+0x184>)
 8001b6c:	f000 ff14 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_GPIO_Init+0x184>)
 8001b86:	f000 ff07 	bl	8002998 <HAL_GPIO_Init>
}
 8001b8a:	bf00      	nop
 8001b8c:	3730      	adds	r7, #48	; 0x30
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <CAN_filterConfig>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void CAN_filterConfig(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
	/*##- Setup the Filter to receive ANY MSG ID #####################################*/
	CAN_FilterTypeDef sFilterConfig;

	  sFilterConfig.FilterBank = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	623b      	str	r3, [r7, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8001bd2:	230e      	movs	r3, #14
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <CAN_filterConfig+0x40>)
 8001bdc:	f000 fbd0 	bl	8002380 <HAL_CAN_ConfigFilter>
}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000284 	.word	0x20000284

08001bec <LED_Display>:
  * @brief  Turns ON/OFF the dedicated LED.
  * @param  LedStatus: LED number from 0 to 3
  * @retval None
  */
void LED_Display(uint8_t LedStatus)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  /* Turn OFF all LEDs */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001bfc:	4819      	ldr	r0, [pc, #100]	; (8001c64 <LED_Display+0x78>)
 8001bfe:	f001 f87f 	bl	8002d00 <HAL_GPIO_WritePin>

  switch(LedStatus)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d826      	bhi.n	8001c58 <LED_Display+0x6c>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <LED_Display+0x24>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c2f 	.word	0x08001c2f
 8001c18:	08001c3d 	.word	0x08001c3d
 8001c1c:	08001c4b 	.word	0x08001c4b
  {
    case (1):
      /* Turn ON LED1 */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <LED_Display+0x78>)
 8001c28:	f001 f86a 	bl	8002d00 <HAL_GPIO_WritePin>
      break;
 8001c2c:	e015      	b.n	8001c5a <LED_Display+0x6e>

    case (2):
      /* Turn ON LED2 */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c34:	480b      	ldr	r0, [pc, #44]	; (8001c64 <LED_Display+0x78>)
 8001c36:	f001 f863 	bl	8002d00 <HAL_GPIO_WritePin>
      break;
 8001c3a:	e00e      	b.n	8001c5a <LED_Display+0x6e>

    case (3):
      /* Turn ON LED3 */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <LED_Display+0x78>)
 8001c44:	f001 f85c 	bl	8002d00 <HAL_GPIO_WritePin>
      break;
 8001c48:	e007      	b.n	8001c5a <LED_Display+0x6e>

    case (4):
      /* Turn ON LED4 */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <LED_Display+0x78>)
 8001c52:	f001 f855 	bl	8002d00 <HAL_GPIO_WritePin>
      break;
 8001c56:	e000      	b.n	8001c5a <LED_Display+0x6e>
    default:
      break;
 8001c58:	bf00      	nop
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40020c00 	.word	0x40020c00

08001c68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f002 fe1f 	bl	80048b4 <osDelay>
 8001c76:	e7fb      	b.n	8001c70 <StartDefaultTask+0x8>

08001c78 <Error_Handler>:
  }
  /* USER CODE END 5 */
}
void Error_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <Error_Handler+0x8>
	...

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	f06f 0001 	mvn.w	r0, #1
 8001cca:	f000 fe3c 	bl	8002946 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a43      	ldr	r2, [pc, #268]	; (8001e08 <HAL_CAN_MspInit+0x12c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d136      	bne.n	8001d6c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_CAN_MspInit+0x130>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_CAN_MspInit+0x130>)
 8001d06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_CAN_MspInit+0x130>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10d      	bne.n	8001d2c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d20:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	482b      	ldr	r0, [pc, #172]	; (8001e14 <HAL_CAN_MspInit+0x138>)
 8001d66:	f000 fe17 	bl	8002998 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d6a:	e048      	b.n	8001dfe <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_CAN_MspInit+0x13c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d143      	bne.n	8001dfe <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_CAN_MspInit+0x130>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_CAN_MspInit+0x130>)
 8001d9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_CAN_MspInit+0x130>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10d      	bne.n	8001dc0 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db2:	6413      	str	r3, [r2, #64]	; 0x40
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_CAN_MspInit+0x134>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ddc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001dee:	2309      	movs	r3, #9
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <HAL_CAN_MspInit+0x138>)
 8001dfa:	f000 fdcd 	bl	8002998 <HAL_GPIO_Init>
}
 8001dfe:	bf00      	nop
 8001e00:	3730      	adds	r7, #48	; 0x30
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40006400 	.word	0x40006400
 8001e0c:	200004e8 	.word	0x200004e8
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40006800 	.word	0x40006800

08001e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_SPI_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12b      	bne.n	8001e96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e76:	23e0      	movs	r3, #224	; 0xe0
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e86:	2305      	movs	r3, #5
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_SPI_MspInit+0x8c>)
 8001e92:	f000 fd81 	bl	8002998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <HAL_TIM_Base_MspInit+0xdc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001eda:	e04e      	b.n	8001f7a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	69bb      	ldr	r3, [r7, #24]
}
 8001f02:	e03a      	b.n	8001f7a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_TIM_Base_MspInit+0xe4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
}
 8001f2a:	e026      	b.n	8001f7a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM6)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_TIM_Base_MspInit+0xe8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
}
 8001f52:	e012      	b.n	8001f7a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM7)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_TIM_Base_MspInit+0xec>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10d      	bne.n	8001f7a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f68:	f043 0320 	orr.w	r3, r3, #32
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_TIM_Base_MspInit+0xe0>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40001000 	.word	0x40001000
 8001f98:	40001400 	.word	0x40001400

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f898 	bl	8002100 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fd0:	f003 f9f4 	bl	80053bc <xTaskGetSchedulerState>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fda:	f003 fc35 	bl	8005848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <SystemInit+0x20>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <SystemInit+0x20>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002024:	4c0b      	ldr	r4, [pc, #44]	; (8002054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002032:	f7ff ffd7 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f003 fe41 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7fe fe53 	bl	8000ce4 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800204c:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 8002050:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002054:	20004244 	.word	0x20004244

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_Init+0x40>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_Init+0x40>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_Init+0x40>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 fc53 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208a:	200f      	movs	r0, #15
 800208c:	f000 f808 	bl	80020a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002090:	f7ff fdf8 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_InitTick+0x54>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_InitTick+0x58>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fc5d 	bl	800297e <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00e      	b.n	80020ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d80a      	bhi.n	80020ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d4:	2200      	movs	r2, #0
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020dc:	f000 fc33 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_InitTick+0x5c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000004 	.word	0x20000004
 80020f8:	2000000c 	.word	0x2000000c
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	2000000c 	.word	0x2000000c
 8002124:	200004ec 	.word	0x200004ec

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200004ec 	.word	0x200004ec

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000000c 	.word	0x2000000c

08002188 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0ed      	b.n	8002376 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fd98 	bl	8001cdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021bc:	f7ff ffb4 	bl	8002128 <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021c2:	e012      	b.n	80021ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021c4:	f7ff ffb0 	bl	8002128 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b0a      	cmp	r3, #10
 80021d0:	d90b      	bls.n	80021ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2205      	movs	r2, #5
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0c5      	b.n	8002376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0e5      	beq.n	80021c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0202 	bic.w	r2, r2, #2
 8002206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002208:	f7ff ff8e 	bl	8002128 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800220e:	e012      	b.n	8002236 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002210:	f7ff ff8a 	bl	8002128 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b0a      	cmp	r3, #10
 800221c:	d90b      	bls.n	8002236 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2205      	movs	r2, #5
 800222e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e09f      	b.n	8002376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e5      	bne.n	8002210 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e1b      	ldrb	r3, [r3, #24]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e007      	b.n	800226e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7e5b      	ldrb	r3, [r3, #25]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d108      	bne.n	8002288 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e007      	b.n	8002298 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7e9b      	ldrb	r3, [r3, #26]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d108      	bne.n	80022b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e007      	b.n	80022c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0220 	bic.w	r2, r2, #32
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7edb      	ldrb	r3, [r3, #27]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0210 	bic.w	r2, r2, #16
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e007      	b.n	80022ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0210 	orr.w	r2, r2, #16
 80022ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7f1b      	ldrb	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0208 	orr.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e007      	b.n	8002316 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0208 	bic.w	r2, r2, #8
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7f5b      	ldrb	r3, [r3, #29]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d108      	bne.n	8002330 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0204 	orr.w	r2, r2, #4
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e007      	b.n	8002340 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	ea42 0103 	orr.w	r1, r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002396:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d003      	beq.n	80023a6 <HAL_CAN_ConfigFilter+0x26>
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	f040 80be 	bne.w	8002522 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_CAN_ConfigFilter+0x1bc>)
 80023a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	431a      	orrs	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	2201      	movs	r2, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	401a      	ands	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d123      	bne.n	8002450 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800242a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3248      	adds	r2, #72	; 0x48
 8002430:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002444:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002446:	6979      	ldr	r1, [r7, #20]
 8002448:	3348      	adds	r3, #72	; 0x48
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d122      	bne.n	800249e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	431a      	orrs	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002478:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3248      	adds	r2, #72	; 0x48
 800247e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002492:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	3348      	adds	r3, #72	; 0x48
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	401a      	ands	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024b8:	e007      	b.n	80024ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024e4:	e007      	b.n	80024f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002514:	f023 0201 	bic.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e006      	b.n	8002530 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40006400 	.word	0x40006400

08002540 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d12e      	bne.n	80025b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800256c:	f7ff fddc 	bl	8002128 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002572:	e012      	b.n	800259a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002574:	f7ff fdd8 	bl	8002128 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d90b      	bls.n	800259a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e012      	b.n	80025c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e006      	b.n	80025c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d003      	beq.n	80025f4 <HAL_CAN_AddTxMessage+0x2c>
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	f040 80b8 	bne.w	8002764 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80a0 	beq.w	8002754 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	0e1b      	lsrs	r3, r3, #24
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d907      	bls.n	8002634 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e09e      	b.n	8002772 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002634:	2201      	movs	r2, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	409a      	lsls	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	6809      	ldr	r1, [r1, #0]
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3318      	adds	r3, #24
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	440b      	add	r3, r1
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e00f      	b.n	8002682 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800266c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002676:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3318      	adds	r3, #24
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	440b      	add	r3, r1
 8002680:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3318      	adds	r3, #24
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	7d1b      	ldrb	r3, [r3, #20]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d111      	bne.n	80026c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3318      	adds	r3, #24
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	3304      	adds	r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6811      	ldr	r1, [r2, #0]
 80026b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3318      	adds	r3, #24
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	440b      	add	r3, r1
 80026be:	3304      	adds	r3, #4
 80026c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3307      	adds	r3, #7
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	061a      	lsls	r2, r3, #24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3306      	adds	r3, #6
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3305      	adds	r3, #5
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4313      	orrs	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	3204      	adds	r2, #4
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	4610      	mov	r0, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6811      	ldr	r1, [r2, #0]
 80026ea:	ea43 0200 	orr.w	r2, r3, r0
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3303      	adds	r3, #3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	061a      	lsls	r2, r3, #24
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3302      	adds	r3, #2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3301      	adds	r3, #1
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	4313      	orrs	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	4610      	mov	r0, r2
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6811      	ldr	r1, [r2, #0]
 8002720:	ea43 0200 	orr.w	r2, r3, r0
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	440b      	add	r3, r1
 800272a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800272e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3318      	adds	r3, #24
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6811      	ldr	r1, [r2, #0]
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3318      	adds	r3, #24
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	440b      	add	r3, r1
 800274e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e00e      	b.n	8002772 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e006      	b.n	8002772 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d002      	beq.n	800279c <HAL_CAN_ActivateNotification+0x1e>
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d109      	bne.n	80027b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6959      	ldr	r1, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e006      	b.n	80027be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff47 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff5c 	bl	8002814 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffb0 	bl	80028ec <SysTick_Config>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	e16b      	b.n	8002c8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f040 815a 	bne.w	8002c86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d005      	beq.n	80029ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d017      	beq.n	8002a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d123      	bne.n	8002adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80b4 	beq.w	8002c86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b60      	ldr	r3, [pc, #384]	; (8002ca4 <HAL_GPIO_Init+0x30c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4a5f      	ldr	r2, [pc, #380]	; (8002ca4 <HAL_GPIO_Init+0x30c>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_GPIO_Init+0x30c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_GPIO_Init+0x310>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_GPIO_Init+0x314>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02b      	beq.n	8002bbe <HAL_GPIO_Init+0x226>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_GPIO_Init+0x318>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d025      	beq.n	8002bba <HAL_GPIO_Init+0x222>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_GPIO_Init+0x31c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01f      	beq.n	8002bb6 <HAL_GPIO_Init+0x21e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_GPIO_Init+0x320>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x21a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x216>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <HAL_GPIO_Init+0x328>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x212>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_GPIO_Init+0x32c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_GPIO_Init+0x330>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x20a>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e00e      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	e00c      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	e00a      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002baa:	2305      	movs	r3, #5
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd0:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x310>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	f67f ae90 	bls.w	80029b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021400 	.word	0x40021400
 8002cc4:	40021800 	.word	0x40021800
 8002cc8:	40021c00 	.word	0x40021c00
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	e001      	b.n	8002cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d44:	887a      	ldrh	r2, [r7, #2]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	041a      	lsls	r2, r3, #16
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	400b      	ands	r3, r1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	619a      	str	r2, [r3, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e267      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d075      	beq.n	8002e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d86:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00c      	beq.n	8002dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b85      	ldr	r3, [pc, #532]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e242      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x74>
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a75      	ldr	r2, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6f      	ldr	r2, [pc, #444]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6c      	ldr	r2, [pc, #432]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a68      	ldr	r2, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7ff f982 	bl	8002128 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7ff f97e 	bl	8002128 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e207      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7ff f96e 	bl	8002128 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7ff f96a 	bl	8002128 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1f3      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c7      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x244>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7ff f923 	bl	8002128 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f91f 	bl	8002128 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a8      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4925      	ldr	r1, [pc, #148]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x244>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff f902 	bl	8002128 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7ff f8fe 	bl	8002128 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e187      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d036      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7ff f8e2 	bl	8002128 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f68:	f7ff f8de 	bl	8002128 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e167      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x200>
 8002f86:	e01b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7ff f8cb 	bl	8002128 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	e00e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f96:	f7ff f8c7 	bl	8002128 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d907      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e150      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470000 	.word	0x42470000
 8002fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ea      	bne.n	8002f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8097 	beq.w	80030fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b7d      	ldr	r3, [pc, #500]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a7c      	ldr	r2, [pc, #496]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b77      	ldr	r3, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b74      	ldr	r3, [pc, #464]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a73      	ldr	r2, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7ff f887 	bl	8002128 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7ff f883 	bl	8002128 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e10c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x2ea>
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x30c>
 800305a:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	4b5c      	ldr	r3, [pc, #368]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003074:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7ff f848 	bl	8002128 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7ff f844 	bl	8002128 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0cb      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCC_OscConfig+0x334>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7ff f832 	bl	8002128 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7ff f82e 	bl	8002128 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0b5      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a1 	beq.w	8003248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d05c      	beq.n	80031cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d141      	bne.n	800319e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7ff f802 	bl	8002128 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fffe 	bl	8002128 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e087      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	019b      	lsls	r3, r3, #6
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe ffd7 	bl	8002128 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe ffd3 	bl	8002128 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e05c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x416>
 800319c:	e054      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe ffc0 	bl	8002128 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe ffbc 	bl	8002128 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e045      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x444>
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e038      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x4ec>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d028      	beq.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d121      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cc      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d90c      	bls.n	8003294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ac:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	494d      	ldr	r1, [pc, #308]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d044      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e067      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe feee 	bl	8002128 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe feea 	bl	8002128 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e032      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4916      	ldr	r1, [pc, #88]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033de:	f000 f821 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490a      	ldr	r1, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fe4e 	bl	80020a0 <HAL_InitTick>

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00
 8003414:	40023800 	.word	0x40023800
 8003418:	08005da0 	.word	0x08005da0
 800341c:	20000004 	.word	0x20000004
 8003420:	20000008 	.word	0x20000008

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b094      	sub	sp, #80	; 0x50
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	647b      	str	r3, [r7, #68]	; 0x44
 8003430:	2300      	movs	r3, #0
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	2300      	movs	r3, #0
 8003436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343c:	4b79      	ldr	r3, [pc, #484]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d00d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x40>
 8003448:	2b08      	cmp	r3, #8
 800344a:	f200 80e1 	bhi.w	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x34>
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x3a>
 8003456:	e0db      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800345c:	e0db      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345e:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_GetSysClockFreq+0x208>)
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003462:	e0d8      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003464:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
 8003484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 800348e:	2300      	movs	r3, #0
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
 8003492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4621      	mov	r1, r4
 80034b0:	1a51      	subs	r1, r2, r1
 80034b2:	6139      	str	r1, [r7, #16]
 80034b4:	4629      	mov	r1, r5
 80034b6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	018b      	lsls	r3, r1, #6
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d2:	4651      	mov	r1, sl
 80034d4:	018a      	lsls	r2, r1, #6
 80034d6:	4651      	mov	r1, sl
 80034d8:	ebb2 0801 	subs.w	r8, r2, r1
 80034dc:	4659      	mov	r1, fp
 80034de:	eb63 0901 	sbc.w	r9, r3, r1
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f6:	4690      	mov	r8, r2
 80034f8:	4699      	mov	r9, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	eb18 0303 	adds.w	r3, r8, r3
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	462b      	mov	r3, r5
 8003504:	eb49 0303 	adc.w	r3, r9, r3
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003516:	4629      	mov	r1, r5
 8003518:	024b      	lsls	r3, r1, #9
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003520:	4621      	mov	r1, r4
 8003522:	024a      	lsls	r2, r1, #9
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003534:	f7fd fa3a 	bl	80009ac <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003540:	e058      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	2200      	movs	r2, #0
 800354a:	4618      	mov	r0, r3
 800354c:	4611      	mov	r1, r2
 800354e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356e:	0150      	lsls	r0, r2, #5
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4641      	mov	r1, r8
 8003576:	ebb2 0a01 	subs.w	sl, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800358c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003594:	ebb2 040a 	subs.w	r4, r2, sl
 8003598:	eb63 050b 	sbc.w	r5, r3, fp
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	00eb      	lsls	r3, r5, #3
 80035a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035aa:	00e2      	lsls	r2, r4, #3
 80035ac:	4614      	mov	r4, r2
 80035ae:	461d      	mov	r5, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	18e3      	adds	r3, r4, r3
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb45 0303 	adc.w	r3, r5, r3
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	61fa      	str	r2, [r7, #28]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	f7fd f9e0 	bl	80009ac <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003618:	4618      	mov	r0, r3
 800361a:	3750      	adds	r7, #80	; 0x50
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07b      	b.n	800373a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d009      	beq.n	8003668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	e005      	b.n	8003668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fbca 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	ea42 0103 	orr.w	r1, r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0104 	and.w	r1, r3, #4
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0210 	and.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b088      	sub	sp, #32
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_SPI_Transmit+0x22>
 8003760:	2302      	movs	r3, #2
 8003762:	e126      	b.n	80039b2 <HAL_SPI_Transmit+0x270>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800376c:	f7fe fcdc 	bl	8002128 <HAL_GetTick>
 8003770:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003786:	e10b      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit+0x52>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003798:	e102      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e0:	d10f      	bne.n	8003802 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003800:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d007      	beq.n	8003820 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	d14b      	bne.n	80038c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Transmit+0xf6>
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d13e      	bne.n	80038b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800385c:	e02b      	b.n	80038b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d112      	bne.n	8003892 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003890:	e011      	b.n	80038b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003892:	f7fe fc49 	bl	8002128 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d803      	bhi.n	80038aa <HAL_SPI_Transmit+0x168>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a8:	d102      	bne.n	80038b0 <HAL_SPI_Transmit+0x16e>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038b4:	e074      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ce      	bne.n	800385e <HAL_SPI_Transmit+0x11c>
 80038c0:	e04c      	b.n	800395c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x18e>
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d140      	bne.n	8003952 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038f6:	e02c      	b.n	8003952 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d113      	bne.n	800392e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36
 800392c:	e011      	b.n	8003952 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392e:	f7fe fbfb 	bl	8002128 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_Transmit+0x204>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003944:	d102      	bne.n	800394c <HAL_SPI_Transmit+0x20a>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003950:	e026      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1cd      	bne.n	80038f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fbcb 	bl	80040fc <SPI_EndRxTxTransaction>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e000      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800399e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af02      	add	r7, sp, #8
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d6:	d112      	bne.n	80039fe <HAL_SPI_Receive+0x44>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10e      	bne.n	80039fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2204      	movs	r2, #4
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039e8:	88fa      	ldrh	r2, [r7, #6]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f8f1 	bl	8003bdc <HAL_SPI_TransmitReceive>
 80039fa:	4603      	mov	r3, r0
 80039fc:	e0ea      	b.n	8003bd4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_SPI_Receive+0x52>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0e3      	b.n	8003bd4 <HAL_SPI_Receive+0x21a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a14:	f7fe fb88 	bl	8002128 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d002      	beq.n	8003a2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
 8003a28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a2a:	e0ca      	b.n	8003bc2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Receive+0x7e>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a3c:	e0c1      	b.n	8003bc2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2204      	movs	r2, #4
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a84:	d10f      	bne.n	8003aa6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d007      	beq.n	8003ac4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d162      	bne.n	8003b92 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003acc:	e02e      	b.n	8003b2c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d115      	bne.n	8003b08 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f103 020c 	add.w	r2, r3, #12
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b06:	e011      	b.n	8003b2c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b08:	f7fe fb0e 	bl	8002128 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d803      	bhi.n	8003b20 <HAL_SPI_Receive+0x166>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_Receive+0x16c>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b2a:	e04a      	b.n	8003bc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1cb      	bne.n	8003ace <HAL_SPI_Receive+0x114>
 8003b36:	e031      	b.n	8003b9c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d113      	bne.n	8003b6e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	b292      	uxth	r2, r2
 8003b52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b6c:	e011      	b.n	8003b92 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b6e:	f7fe fadb 	bl	8002128 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d803      	bhi.n	8003b86 <HAL_SPI_Receive+0x1cc>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d102      	bne.n	8003b8c <HAL_SPI_Receive+0x1d2>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b90:	e017      	b.n	8003bc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cd      	bne.n	8003b38 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fa45 	bl	8004030 <SPI_EndRxTransaction>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
 8003bbe:	e000      	b.n	8003bc2 <HAL_SPI_Receive+0x208>
  }

error :
 8003bc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	; 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bea:	2301      	movs	r3, #1
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x26>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e18a      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x33c>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c0a:	f7fe fa8d 	bl	8002128 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d00f      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0x70>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c32:	d107      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x68>
 8003c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d003      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c4a:	e15b      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x82>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x82>
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c64:	e14e      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d003      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2205      	movs	r2, #5
 8003c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	887a      	ldrh	r2, [r7, #2]
 8003ca2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d007      	beq.n	8003cce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d178      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x10a>
 8003ce0:	8b7b      	ldrh	r3, [r7, #26]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d166      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c9a      	adds	r2, r3, #2
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d0a:	e053      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d11b      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x176>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d016      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x176>
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d113      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d119      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x1b8>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	b292      	uxth	r2, r2
 8003d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d90:	2301      	movs	r3, #1
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d94:	f7fe f9c8 	bl	8002128 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d807      	bhi.n	8003db4 <HAL_SPI_TransmitReceive+0x1d8>
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003daa:	d003      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003db2:	e0a7      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1a6      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x130>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1a1      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x130>
 8003dc8:	e07c      	b.n	8003ec4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x1fc>
 8003dd2:	8b7b      	ldrh	r3, [r7, #26]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d16b      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfe:	e057      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d11c      	bne.n	8003e48 <HAL_SPI_TransmitReceive+0x26c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d017      	beq.n	8003e48 <HAL_SPI_TransmitReceive+0x26c>
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d114      	bne.n	8003e48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	7812      	ldrb	r2, [r2, #0]
 8003e2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d119      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x2ae>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d014      	beq.n	8003e8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e86:	2301      	movs	r3, #1
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e8a:	f7fe f94d 	bl	8002128 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_TransmitReceive+0x2c6>
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x2cc>
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003eae:	e029      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1a2      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x224>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d19d      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f917 	bl	80040fc <SPI_EndRxTxTransaction>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ee0:	e010      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	e000      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f30:	f7fe f8fa 	bl	8002128 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f40:	f7fe f8f2 	bl	8002128 <HAL_GetTick>
 8003f44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	015b      	lsls	r3, r3, #5
 8003f4c:	0d1b      	lsrs	r3, r3, #20
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	fb02 f303 	mul.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f56:	e054      	b.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5e:	d050      	beq.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f60:	f7fe f8e2 	bl	8002128 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d902      	bls.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d13d      	bne.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d111      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f98:	d004      	beq.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d107      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d10f      	bne.n	8003fde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e017      	b.n	8004022 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	429a      	cmp	r2, r3
 800401e:	d19b      	bne.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000004 	.word	0x20000004

08004030 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004044:	d111      	bne.n	800406a <SPI_EndRxTransaction+0x3a>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404e:	d004      	beq.n	800405a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004058:	d107      	bne.n	800406a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004072:	d12a      	bne.n	80040ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d012      	beq.n	80040a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff ff49 	bl	8003f20 <SPI_WaitFlagStateUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02d      	beq.n	80040f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e026      	b.n	80040f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	2101      	movs	r1, #1
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff36 	bl	8003f20 <SPI_WaitFlagStateUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01a      	beq.n	80040f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e013      	b.n	80040f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	2101      	movs	r1, #1
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff ff23 	bl	8003f20 <SPI_WaitFlagStateUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e000      	b.n	80040f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <SPI_EndRxTxTransaction+0x7c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <SPI_EndRxTxTransaction+0x80>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0d5b      	lsrs	r3, r3, #21
 8004114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004126:	d112      	bne.n	800414e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fef4 	bl	8003f20 <SPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3b01      	subs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d0f2      	beq.n	800414e <SPI_EndRxTxTransaction+0x52>
 8004168:	e000      	b.n	800416c <SPI_EndRxTxTransaction+0x70>
        break;
 800416a:	bf00      	nop
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004
 800417c:	165e9f81 	.word	0x165e9f81

08004180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e041      	b.n	8004216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fe80 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 f95e 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d001      	beq.n	8004238 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e046      	b.n	80042c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_TIM_Base_Start+0xb4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d01d      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_TIM_Base_Start+0xb8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_TIM_Base_Start+0xbc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_TIM_Base_Start+0xc0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <HAL_TIM_Base_Start+0xc4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_TIM_Base_Start+0xc8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_Base_Start+0x70>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_TIM_Base_Start+0xcc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d111      	bne.n	80042b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d010      	beq.n	80042c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b2:	e007      	b.n	80042c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40001800 	.word	0x40001800

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0b4      	b.n	8004476 <HAL_TIM_ConfigClockSource+0x186>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d03e      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	f200 8087 	bhi.w	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	f000 8086 	beq.w	8004462 <HAL_TIM_ConfigClockSource+0x172>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d87f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b70      	cmp	r3, #112	; 0x70
 800435e:	d01a      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0xa6>
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d87b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b60      	cmp	r3, #96	; 0x60
 8004366:	d050      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x11a>
 8004368:	2b60      	cmp	r3, #96	; 0x60
 800436a:	d877      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b50      	cmp	r3, #80	; 0x50
 800436e:	d03c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xfa>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d873      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d058      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x13a>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d86f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b30      	cmp	r3, #48	; 0x30
 800437e:	d064      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d86b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b20      	cmp	r3, #32
 8004386:	d060      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d867      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b10      	cmp	r3, #16
 8004392:	d05a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	e062      	b.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f000 f985 	bl	80046b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
      break;
 80043c2:	e04f      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6899      	ldr	r1, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f000 f96e 	bl	80046b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e6:	609a      	str	r2, [r3, #8]
      break;
 80043e8:	e03c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f8e2 	bl	80045c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2150      	movs	r1, #80	; 0x50
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f93b 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8004408:	e02c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f901 	bl	800461e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2160      	movs	r1, #96	; 0x60
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f92b 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8004428:	e01c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	f000 f8c2 	bl	80045c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f91b 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8004448:	e00c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 f912 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 800445a:	e003      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e000      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a40      	ldr	r2, [pc, #256]	; (8004594 <TIM_Base_SetConfig+0x114>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d00f      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3d      	ldr	r2, [pc, #244]	; (8004598 <TIM_Base_SetConfig+0x118>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3c      	ldr	r2, [pc, #240]	; (800459c <TIM_Base_SetConfig+0x11c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <TIM_Base_SetConfig+0x120>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3a      	ldr	r2, [pc, #232]	; (80045a4 <TIM_Base_SetConfig+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2f      	ldr	r2, [pc, #188]	; (8004594 <TIM_Base_SetConfig+0x114>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d027      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <TIM_Base_SetConfig+0x118>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d023      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2b      	ldr	r2, [pc, #172]	; (800459c <TIM_Base_SetConfig+0x11c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2a      	ldr	r2, [pc, #168]	; (80045a0 <TIM_Base_SetConfig+0x120>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a29      	ldr	r2, [pc, #164]	; (80045a4 <TIM_Base_SetConfig+0x124>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <TIM_Base_SetConfig+0x128>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a27      	ldr	r2, [pc, #156]	; (80045ac <TIM_Base_SetConfig+0x12c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <TIM_Base_SetConfig+0x130>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <TIM_Base_SetConfig+0x134>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <TIM_Base_SetConfig+0x138>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a23      	ldr	r2, [pc, #140]	; (80045bc <TIM_Base_SetConfig+0x13c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <TIM_Base_SetConfig+0x114>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <TIM_Base_SetConfig+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40010400 	.word	0x40010400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800
 80045b4:	40001800 	.word	0x40001800
 80045b8:	40001c00 	.word	0x40001c00
 80045bc:	40002000 	.word	0x40002000

080045c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 030a 	bic.w	r3, r3, #10
 80045fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461e:	b480      	push	{r7}
 8004620:	b087      	sub	sp, #28
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800465a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	f043 0307 	orr.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4313      	orrs	r3, r2
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e05a      	b.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d022      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d01d      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10c      	bne.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047fe:	2b84      	cmp	r3, #132	; 0x84
 8004800:	d005      	beq.n	800480e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004802:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	3303      	adds	r3, #3
 800480c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af04      	add	r7, sp, #16
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d020      	beq.n	8004870 <osThreadCreate+0x54>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01c      	beq.n	8004870 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685c      	ldr	r4, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681d      	ldr	r5, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691e      	ldr	r6, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ffcf 	bl	80047ec <makeFreeRtosPriority>
 800484e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004858:	9202      	str	r2, [sp, #8]
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	9100      	str	r1, [sp, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4632      	mov	r2, r6
 8004862:	4629      	mov	r1, r5
 8004864:	4620      	mov	r0, r4
 8004866:	f000 f8ed 	bl	8004a44 <xTaskCreateStatic>
 800486a:	4603      	mov	r3, r0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e01c      	b.n	80048aa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685c      	ldr	r4, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800487c:	b29e      	uxth	r6, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ffb1 	bl	80047ec <makeFreeRtosPriority>
 800488a:	4602      	mov	r2, r0
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	9200      	str	r2, [sp, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4632      	mov	r2, r6
 8004898:	4629      	mov	r1, r5
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f92f 	bl	8004afe <xTaskCreate>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <osDelay+0x16>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	e000      	b.n	80048cc <osDelay+0x18>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fa4d 	bl	8004d6c <vTaskDelay>
  
  return osOK;
 80048d2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f103 0208 	add.w	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f103 0208 	add.w	r2, r3, #8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0208 	add.w	r2, r3, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d103      	bne.n	800499e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e00c      	b.n	80049b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3308      	adds	r3, #8
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e002      	b.n	80049ac <vListInsert+0x2e>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d2f6      	bcs.n	80049a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6892      	ldr	r2, [r2, #8]
 8004a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d103      	bne.n	8004a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	1e5a      	subs	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	; 0x38
 8004a48:	af04      	add	r7, sp, #16
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	623b      	str	r3, [r7, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xTaskCreateStatic+0x46>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	61fb      	str	r3, [r7, #28]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a8a:	2354      	movs	r3, #84	; 0x54
 8004a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b54      	cmp	r3, #84	; 0x54
 8004a92:	d00a      	beq.n	8004aaa <xTaskCreateStatic+0x66>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	61bb      	str	r3, [r7, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004aaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01e      	beq.n	8004af0 <xTaskCreateStatic+0xac>
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aca:	2300      	movs	r3, #0
 8004acc:	9303      	str	r3, [sp, #12]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	f107 0314 	add.w	r3, r7, #20
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f850 	bl	8004b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aea:	f000 f8d5 	bl	8004c98 <prvAddNewTaskToReadyList>
 8004aee:	e001      	b.n	8004af4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004af4:	697b      	ldr	r3, [r7, #20]
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3728      	adds	r7, #40	; 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08c      	sub	sp, #48	; 0x30
 8004b02:	af04      	add	r7, sp, #16
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fee8 	bl	80058e8 <pvPortMalloc>
 8004b18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00e      	beq.n	8004b3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b20:	2054      	movs	r0, #84	; 0x54
 8004b22:	f000 fee1 	bl	80058e8 <pvPortMalloc>
 8004b26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
 8004b34:	e005      	b.n	8004b42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f000 ffa2 	bl	8005a80 <vPortFree>
 8004b3c:	e001      	b.n	8004b42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9303      	str	r3, [sp, #12]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f80e 	bl	8004b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b6c:	69f8      	ldr	r0, [r7, #28]
 8004b6e:	f000 f893 	bl	8004c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e002      	b.n	8004b7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	617b      	str	r3, [r7, #20]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01f      	beq.n	8004c16 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	e012      	b.n	8004c02 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	7819      	ldrb	r1, [r3, #0]
 8004be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	3334      	adds	r3, #52	; 0x34
 8004bec:	460a      	mov	r2, r1
 8004bee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d9e9      	bls.n	8004bdc <prvInitialiseNewTask+0x54>
 8004c08:	e000      	b.n	8004c0c <prvInitialiseNewTask+0x84>
			{
				break;
 8004c0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c14:	e003      	b.n	8004c1e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	2b06      	cmp	r3, #6
 8004c22:	d901      	bls.n	8004c28 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c24:	2306      	movs	r3, #6
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fe6c 	bl	800491c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	3318      	adds	r3, #24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fe67 	bl	800491c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f1c3 0207 	rsb	r2, r3, #7
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	2200      	movs	r2, #0
 8004c68:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	69b8      	ldr	r0, [r7, #24]
 8004c78:	f000 fc24 	bl	80054c4 <pxPortInitialiseStack>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c8e:	bf00      	nop
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ca0:	f000 fd40 	bl	8005724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <prvAddNewTaskToReadyList+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <prvAddNewTaskToReadyList+0xb8>)
 8004cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <prvAddNewTaskToReadyList+0xbc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cb6:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <prvAddNewTaskToReadyList+0xbc>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <prvAddNewTaskToReadyList+0xb8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d110      	bne.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cc4:	f000 fabc 	bl	8005240 <prvInitialiseTaskLists>
 8004cc8:	e00d      	b.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cca:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <prvAddNewTaskToReadyList+0xc0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <prvAddNewTaskToReadyList+0xbc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d802      	bhi.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <prvAddNewTaskToReadyList+0xbc>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <prvAddNewTaskToReadyList+0xc4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <prvAddNewTaskToReadyList+0xc4>)
 8004cee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <prvAddNewTaskToReadyList+0xcc>)
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7ff fe0c 	bl	8004936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d1e:	f000 fd31 	bl	8005784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <prvAddNewTaskToReadyList+0xc0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvAddNewTaskToReadyList+0xbc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d207      	bcs.n	8004d48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <prvAddNewTaskToReadyList+0xd0>)
 8004d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200005f0 	.word	0x200005f0
 8004d54:	200004f0 	.word	0x200004f0
 8004d58:	200005fc 	.word	0x200005fc
 8004d5c:	2000060c 	.word	0x2000060c
 8004d60:	200005f8 	.word	0x200005f8
 8004d64:	200004f4 	.word	0x200004f4
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d017      	beq.n	8004dae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <vTaskDelay+0x60>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <vTaskDelay+0x30>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	60bb      	str	r3, [r7, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d9c:	f000 f87a 	bl	8004e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004da0:	2100      	movs	r1, #0
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fb28 	bl	80053f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004da8:	f000 f882 	bl	8004eb0 <xTaskResumeAll>
 8004dac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <vTaskDelay+0x64>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000618 	.word	0x20000618
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004de2:	463a      	mov	r2, r7
 8004de4:	1d39      	adds	r1, r7, #4
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fb ff60 	bl	8000cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	9202      	str	r2, [sp, #8]
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	460a      	mov	r2, r1
 8004e02:	491e      	ldr	r1, [pc, #120]	; (8004e7c <vTaskStartScheduler+0xa8>)
 8004e04:	481e      	ldr	r0, [pc, #120]	; (8004e80 <vTaskStartScheduler+0xac>)
 8004e06:	f7ff fe1d 	bl	8004a44 <xTaskCreateStatic>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <vTaskStartScheduler+0xb0>)
 8004e0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e10:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <vTaskStartScheduler+0xb0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e001      	b.n	8004e22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d116      	bne.n	8004e56 <vTaskStartScheduler+0x82>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	613b      	str	r3, [r7, #16]
}
 8004e3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <vTaskStartScheduler+0xb4>)
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <vTaskStartScheduler+0xb8>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <vTaskStartScheduler+0xbc>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e50:	f000 fbc6 	bl	80055e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e54:	e00e      	b.n	8004e74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5c:	d10a      	bne.n	8004e74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60fb      	str	r3, [r7, #12]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <vTaskStartScheduler+0x9e>
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	08005d98 	.word	0x08005d98
 8004e80:	08005211 	.word	0x08005211
 8004e84:	20000614 	.word	0x20000614
 8004e88:	20000610 	.word	0x20000610
 8004e8c:	200005fc 	.word	0x200005fc
 8004e90:	200005f4 	.word	0x200005f4

08004e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <vTaskSuspendAll+0x18>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4a03      	ldr	r2, [pc, #12]	; (8004eac <vTaskSuspendAll+0x18>)
 8004ea0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	20000618 	.word	0x20000618

08004eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <xTaskResumeAll+0x2c>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	603b      	str	r3, [r7, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004edc:	f000 fc22 	bl	8005724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ee0:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4a37      	ldr	r2, [pc, #220]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004ee8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eea:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d161      	bne.n	8004fb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ef2:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <xTaskResumeAll+0x118>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d05d      	beq.n	8004fb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004efa:	e02e      	b.n	8004f5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efc:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <xTaskResumeAll+0x11c>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3318      	adds	r3, #24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fd71 	bl	80049f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fd6c 	bl	80049f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <xTaskResumeAll+0x120>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <xTaskResumeAll+0x120>)
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <xTaskResumeAll+0x124>)
 8004f38:	441a      	add	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7ff fcf8 	bl	8004936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <xTaskResumeAll+0x128>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d302      	bcc.n	8004f5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f54:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <xTaskResumeAll+0x12c>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <xTaskResumeAll+0x11c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1cc      	bne.n	8004efc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f68:	f000 fa08 	bl	800537c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <xTaskResumeAll+0x130>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d010      	beq.n	8004f9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f78:	f000 f836 	bl	8004fe8 <xTaskIncrementTick>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f82:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <xTaskResumeAll+0x12c>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f1      	bne.n	8004f78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <xTaskResumeAll+0x130>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <xTaskResumeAll+0x12c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <xTaskResumeAll+0x134>)
 8004fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb6:	f000 fbe5 	bl	8005784 <vPortExitCritical>

	return xAlreadyYielded;
 8004fba:	68bb      	ldr	r3, [r7, #8]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000618 	.word	0x20000618
 8004fc8:	200005f0 	.word	0x200005f0
 8004fcc:	200005b0 	.word	0x200005b0
 8004fd0:	200005f8 	.word	0x200005f8
 8004fd4:	200004f4 	.word	0x200004f4
 8004fd8:	200004f0 	.word	0x200004f0
 8004fdc:	20000604 	.word	0x20000604
 8004fe0:	20000600 	.word	0x20000600
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff2:	4b4e      	ldr	r3, [pc, #312]	; (800512c <xTaskIncrementTick+0x144>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 808e 	bne.w	8005118 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ffc:	4b4c      	ldr	r3, [pc, #304]	; (8005130 <xTaskIncrementTick+0x148>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005004:	4a4a      	ldr	r2, [pc, #296]	; (8005130 <xTaskIncrementTick+0x148>)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d120      	bne.n	8005052 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005010:	4b48      	ldr	r3, [pc, #288]	; (8005134 <xTaskIncrementTick+0x14c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <xTaskIncrementTick+0x48>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	603b      	str	r3, [r7, #0]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <xTaskIncrementTick+0x46>
 8005030:	4b40      	ldr	r3, [pc, #256]	; (8005134 <xTaskIncrementTick+0x14c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	4b40      	ldr	r3, [pc, #256]	; (8005138 <xTaskIncrementTick+0x150>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3e      	ldr	r2, [pc, #248]	; (8005134 <xTaskIncrementTick+0x14c>)
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4a3e      	ldr	r2, [pc, #248]	; (8005138 <xTaskIncrementTick+0x150>)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <xTaskIncrementTick+0x154>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a3c      	ldr	r2, [pc, #240]	; (800513c <xTaskIncrementTick+0x154>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	f000 f995 	bl	800537c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005052:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <xTaskIncrementTick+0x158>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	429a      	cmp	r2, r3
 800505a:	d348      	bcc.n	80050ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800505c:	4b35      	ldr	r3, [pc, #212]	; (8005134 <xTaskIncrementTick+0x14c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <xTaskIncrementTick+0x158>)
 8005068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800506c:	601a      	str	r2, [r3, #0]
					break;
 800506e:	e03e      	b.n	80050ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005070:	4b30      	ldr	r3, [pc, #192]	; (8005134 <xTaskIncrementTick+0x14c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d203      	bcs.n	8005090 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005088:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <xTaskIncrementTick+0x158>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800508e:	e02e      	b.n	80050ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	3304      	adds	r3, #4
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fcab 	bl	80049f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	3318      	adds	r3, #24
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fca2 	bl	80049f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	2201      	movs	r2, #1
 80050b2:	409a      	lsls	r2, r3
 80050b4:	4b23      	ldr	r3, [pc, #140]	; (8005144 <xTaskIncrementTick+0x15c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	4a22      	ldr	r2, [pc, #136]	; (8005144 <xTaskIncrementTick+0x15c>)
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <xTaskIncrementTick+0x160>)
 80050cc:	441a      	add	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f7ff fc2e 	bl	8004936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050de:	4b1b      	ldr	r3, [pc, #108]	; (800514c <xTaskIncrementTick+0x164>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d3b9      	bcc.n	800505c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050e8:	2301      	movs	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ec:	e7b6      	b.n	800505c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <xTaskIncrementTick+0x164>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	4914      	ldr	r1, [pc, #80]	; (8005148 <xTaskIncrementTick+0x160>)
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d901      	bls.n	800510a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005106:	2301      	movs	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <xTaskIncrementTick+0x168>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e004      	b.n	8005122 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005118:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <xTaskIncrementTick+0x16c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <xTaskIncrementTick+0x16c>)
 8005120:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005122:	697b      	ldr	r3, [r7, #20]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000618 	.word	0x20000618
 8005130:	200005f4 	.word	0x200005f4
 8005134:	200005a8 	.word	0x200005a8
 8005138:	200005ac 	.word	0x200005ac
 800513c:	20000608 	.word	0x20000608
 8005140:	20000610 	.word	0x20000610
 8005144:	200005f8 	.word	0x200005f8
 8005148:	200004f4 	.word	0x200004f4
 800514c:	200004f0 	.word	0x200004f0
 8005150:	20000604 	.word	0x20000604
 8005154:	20000600 	.word	0x20000600

08005158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800515e:	4b27      	ldr	r3, [pc, #156]	; (80051fc <vTaskSwitchContext+0xa4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005166:	4b26      	ldr	r3, [pc, #152]	; (8005200 <vTaskSwitchContext+0xa8>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800516c:	e03f      	b.n	80051ee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <vTaskSwitchContext+0xa8>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005174:	4b23      	ldr	r3, [pc, #140]	; (8005204 <vTaskSwitchContext+0xac>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	f1c3 031f 	rsb	r3, r3, #31
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	491f      	ldr	r1, [pc, #124]	; (8005208 <vTaskSwitchContext+0xb0>)
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <vTaskSwitchContext+0x5a>
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <vTaskSwitchContext+0xb0>)
 80051c0:	4413      	add	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3308      	adds	r3, #8
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d104      	bne.n	80051e4 <vTaskSwitchContext+0x8c>
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4a08      	ldr	r2, [pc, #32]	; (800520c <vTaskSwitchContext+0xb4>)
 80051ec:	6013      	str	r3, [r2, #0]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000618 	.word	0x20000618
 8005200:	20000604 	.word	0x20000604
 8005204:	200005f8 	.word	0x200005f8
 8005208:	200004f4 	.word	0x200004f4
 800520c:	200004f0 	.word	0x200004f0

08005210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005218:	f000 f852 	bl	80052c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <prvIdleTask+0x28>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d9f9      	bls.n	8005218 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <prvIdleTask+0x2c>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005234:	e7f0      	b.n	8005218 <prvIdleTask+0x8>
 8005236:	bf00      	nop
 8005238:	200004f4 	.word	0x200004f4
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005246:	2300      	movs	r3, #0
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	e00c      	b.n	8005266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <prvInitialiseTaskLists+0x60>)
 8005258:	4413      	add	r3, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fb3e 	bl	80048dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3301      	adds	r3, #1
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b06      	cmp	r3, #6
 800526a:	d9ef      	bls.n	800524c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800526c:	480d      	ldr	r0, [pc, #52]	; (80052a4 <prvInitialiseTaskLists+0x64>)
 800526e:	f7ff fb35 	bl	80048dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005272:	480d      	ldr	r0, [pc, #52]	; (80052a8 <prvInitialiseTaskLists+0x68>)
 8005274:	f7ff fb32 	bl	80048dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005278:	480c      	ldr	r0, [pc, #48]	; (80052ac <prvInitialiseTaskLists+0x6c>)
 800527a:	f7ff fb2f 	bl	80048dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800527e:	480c      	ldr	r0, [pc, #48]	; (80052b0 <prvInitialiseTaskLists+0x70>)
 8005280:	f7ff fb2c 	bl	80048dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005284:	480b      	ldr	r0, [pc, #44]	; (80052b4 <prvInitialiseTaskLists+0x74>)
 8005286:	f7ff fb29 	bl	80048dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <prvInitialiseTaskLists+0x78>)
 800528c:	4a05      	ldr	r2, [pc, #20]	; (80052a4 <prvInitialiseTaskLists+0x64>)
 800528e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <prvInitialiseTaskLists+0x7c>)
 8005292:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <prvInitialiseTaskLists+0x68>)
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	200004f4 	.word	0x200004f4
 80052a4:	20000580 	.word	0x20000580
 80052a8:	20000594 	.word	0x20000594
 80052ac:	200005b0 	.word	0x200005b0
 80052b0:	200005c4 	.word	0x200005c4
 80052b4:	200005dc 	.word	0x200005dc
 80052b8:	200005a8 	.word	0x200005a8
 80052bc:	200005ac 	.word	0x200005ac

080052c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c6:	e019      	b.n	80052fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052c8:	f000 fa2c 	bl	8005724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052cc:	4b10      	ldr	r3, [pc, #64]	; (8005310 <prvCheckTasksWaitingTermination+0x50>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fb89 	bl	80049f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <prvCheckTasksWaitingTermination+0x54>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <prvCheckTasksWaitingTermination+0x54>)
 80052e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <prvCheckTasksWaitingTermination+0x58>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <prvCheckTasksWaitingTermination+0x58>)
 80052f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052f2:	f000 fa47 	bl	8005784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f810 	bl	800531c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <prvCheckTasksWaitingTermination+0x58>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e1      	bne.n	80052c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200005c4 	.word	0x200005c4
 8005314:	200005f0 	.word	0x200005f0
 8005318:	200005d8 	.word	0x200005d8

0800531c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fba4 	bl	8005a80 <vPortFree>
				vPortFree( pxTCB );
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fba1 	bl	8005a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800533e:	e018      	b.n	8005372 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005346:	2b01      	cmp	r3, #1
 8005348:	d103      	bne.n	8005352 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fb98 	bl	8005a80 <vPortFree>
	}
 8005350:	e00f      	b.n	8005372 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005358:	2b02      	cmp	r3, #2
 800535a:	d00a      	beq.n	8005372 <prvDeleteTCB+0x56>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <prvDeleteTCB+0x54>
	}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <prvResetNextTaskUnblockTime+0x38>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <prvResetNextTaskUnblockTime+0x3c>)
 800538e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005394:	e008      	b.n	80053a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <prvResetNextTaskUnblockTime+0x38>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <prvResetNextTaskUnblockTime+0x3c>)
 80053a6:	6013      	str	r3, [r2, #0]
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	200005a8 	.word	0x200005a8
 80053b8:	20000610 	.word	0x20000610

080053bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <xTaskGetSchedulerState+0x34>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053ca:	2301      	movs	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	e008      	b.n	80053e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d0:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <xTaskGetSchedulerState+0x38>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053d8:	2302      	movs	r3, #2
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	e001      	b.n	80053e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053e2:	687b      	ldr	r3, [r7, #4]
	}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	200005fc 	.word	0x200005fc
 80053f4:	20000618 	.word	0x20000618

080053f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3304      	adds	r3, #4
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff faee 	bl	80049f0 <uxListRemove>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	2201      	movs	r2, #1
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4013      	ands	r3, r2
 800542e:	4a20      	ldr	r2, [pc, #128]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005438:	d10a      	bne.n	8005450 <prvAddCurrentTaskToDelayedList+0x58>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	481a      	ldr	r0, [pc, #104]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800544a:	f7ff fa74 	bl	8004936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800544e:	e026      	b.n	800549e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	429a      	cmp	r2, r3
 8005466:	d209      	bcs.n	800547c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005468:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7ff fa82 	bl	800497e <vListInsert>
}
 800547a:	e010      	b.n	800549e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7ff fa78 	bl	800497e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d202      	bcs.n	800549e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005498:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6013      	str	r3, [r2, #0]
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200005f4 	.word	0x200005f4
 80054ac:	200004f0 	.word	0x200004f0
 80054b0:	200005f8 	.word	0x200005f8
 80054b4:	200005dc 	.word	0x200005dc
 80054b8:	200005ac 	.word	0x200005ac
 80054bc:	200005a8 	.word	0x200005a8
 80054c0:	20000610 	.word	0x20000610

080054c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3b04      	subs	r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b04      	subs	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b04      	subs	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054f4:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <pxPortInitialiseStack+0x64>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b14      	subs	r3, #20
 80054fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b04      	subs	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f06f 0202 	mvn.w	r2, #2
 8005512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b20      	subs	r3, #32
 8005518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	0800552d 	.word	0x0800552d

0800552c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <prvTaskExitError+0x54>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553e:	d00a      	beq.n	8005556 <prvTaskExitError+0x2a>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	60fb      	str	r3, [r7, #12]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <prvTaskExitError+0x28>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60bb      	str	r3, [r7, #8]
}
 8005568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800556a:	bf00      	nop
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0fc      	beq.n	800556c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000010 	.word	0x20000010
	...

08005590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <pxCurrentTCBConst2>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f380 8809 	msr	PSP, r0
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	4770      	bx	lr
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst2>:
 80055b0:	200004f0 	.word	0x200004f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055b8:	4808      	ldr	r0, [pc, #32]	; (80055dc <prvPortStartFirstTask+0x24>)
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f380 8808 	msr	MSP, r0
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8814 	msr	CONTROL, r0
 80055ca:	b662      	cpsie	i
 80055cc:	b661      	cpsie	f
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	df00      	svc	0
 80055d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055da:	bf00      	nop
 80055dc:	e000ed08 	.word	0xe000ed08

080055e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055e6:	4b46      	ldr	r3, [pc, #280]	; (8005700 <xPortStartScheduler+0x120>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a46      	ldr	r2, [pc, #280]	; (8005704 <xPortStartScheduler+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10a      	bne.n	8005606 <xPortStartScheduler+0x26>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005606:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <xPortStartScheduler+0x120>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3f      	ldr	r2, [pc, #252]	; (8005708 <xPortStartScheduler+0x128>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d10a      	bne.n	8005626 <xPortStartScheduler+0x46>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005626:	4b39      	ldr	r3, [pc, #228]	; (800570c <xPortStartScheduler+0x12c>)
 8005628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <xPortStartScheduler+0x130>)
 800564c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <xPortStartScheduler+0x134>)
 8005650:	2207      	movs	r2, #7
 8005652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005654:	e009      	b.n	800566a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <xPortStartScheduler+0x134>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	4a2d      	ldr	r2, [pc, #180]	; (8005714 <xPortStartScheduler+0x134>)
 800565e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d0ef      	beq.n	8005656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <xPortStartScheduler+0x134>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00a      	beq.n	8005698 <xPortStartScheduler+0xb8>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005698:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <xPortStartScheduler+0x134>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <xPortStartScheduler+0x134>)
 80056a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xPortStartScheduler+0x134>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <xPortStartScheduler+0x134>)
 80056ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056b6:	4b18      	ldr	r3, [pc, #96]	; (8005718 <xPortStartScheduler+0x138>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <xPortStartScheduler+0x138>)
 80056bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <xPortStartScheduler+0x138>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a14      	ldr	r2, [pc, #80]	; (8005718 <xPortStartScheduler+0x138>)
 80056c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056ce:	f000 f8dd 	bl	800588c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <xPortStartScheduler+0x13c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056d8:	f000 f8fc 	bl	80058d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xPortStartScheduler+0x140>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <xPortStartScheduler+0x140>)
 80056e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056e8:	f7ff ff66 	bl	80055b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056ec:	f7ff fd34 	bl	8005158 <vTaskSwitchContext>
	prvTaskExitError();
 80056f0:	f7ff ff1c 	bl	800552c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	e000ed00 	.word	0xe000ed00
 8005704:	410fc271 	.word	0x410fc271
 8005708:	410fc270 	.word	0x410fc270
 800570c:	e000e400 	.word	0xe000e400
 8005710:	2000061c 	.word	0x2000061c
 8005714:	20000620 	.word	0x20000620
 8005718:	e000ed20 	.word	0xe000ed20
 800571c:	20000010 	.word	0x20000010
 8005720:	e000ef34 	.word	0xe000ef34

08005724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	607b      	str	r3, [r7, #4]
}
 800573c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <vPortEnterCritical+0x58>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a0d      	ldr	r2, [pc, #52]	; (800577c <vPortEnterCritical+0x58>)
 8005746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <vPortEnterCritical+0x58>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10f      	bne.n	8005770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <vPortEnterCritical+0x5c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <vPortEnterCritical+0x4c>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <vPortEnterCritical+0x4a>
	}
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000010 	.word	0x20000010
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <vPortExitCritical+0x50>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <vPortExitCritical+0x24>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	607b      	str	r3, [r7, #4]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <vPortExitCritical+0x50>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <vPortExitCritical+0x50>)
 80057b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d105      	bne.n	80057c6 <vPortExitCritical+0x42>
 80057ba:	2300      	movs	r3, #0
 80057bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000010 	.word	0x20000010
	...

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b15      	ldr	r3, [pc, #84]	; (8005840 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	f01e 0f10 	tst.w	lr, #16
 80057f0:	bf08      	it	eq
 80057f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	6010      	str	r0, [r2, #0]
 80057fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005804:	f380 8811 	msr	BASEPRI, r0
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f7ff fca2 	bl	8005158 <vTaskSwitchContext>
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f380 8811 	msr	BASEPRI, r0
 800581c:	bc09      	pop	{r0, r3}
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005826:	f01e 0f10 	tst.w	lr, #16
 800582a:	bf08      	it	eq
 800582c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005830:	f380 8809 	msr	PSP, r0
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	f3af 8000 	nop.w

08005840 <pxCurrentTCBConst>:
 8005840:	200004f0 	.word	0x200004f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005862:	f7ff fbc1 	bl	8004fe8 <xTaskIncrementTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <xPortSysTickHandler+0x40>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortSetupTimerInterrupt+0x34>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <vPortSetupTimerInterrupt+0x38>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <vPortSetupTimerInterrupt+0x3c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <vPortSetupTimerInterrupt+0x40>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <vPortSetupTimerInterrupt+0x44>)
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ae:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <vPortSetupTimerInterrupt+0x34>)
 80058b0:	2207      	movs	r2, #7
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e010 	.word	0xe000e010
 80058c4:	e000e018 	.word	0xe000e018
 80058c8:	20000004 	.word	0x20000004
 80058cc:	10624dd3 	.word	0x10624dd3
 80058d0:	e000e014 	.word	0xe000e014

080058d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058e4 <vPortEnableVFP+0x10>
 80058d8:	6801      	ldr	r1, [r0, #0]
 80058da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058de:	6001      	str	r1, [r0, #0]
 80058e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058e2:	bf00      	nop
 80058e4:	e000ed88 	.word	0xe000ed88

080058e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058f4:	f7ff face 	bl	8004e94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058f8:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <pvPortMalloc+0x180>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005900:	f000 f920 	bl	8005b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <pvPortMalloc+0x184>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8093 	bne.w	8005a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01d      	beq.n	8005954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005918:	2208      	movs	r2, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d014      	beq.n	8005954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <pvPortMalloc+0x6c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d06e      	beq.n	8005a38 <pvPortMalloc+0x150>
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <pvPortMalloc+0x188>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d869      	bhi.n	8005a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005964:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <pvPortMalloc+0x18c>)
 8005966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005968:	4b42      	ldr	r3, [pc, #264]	; (8005a74 <pvPortMalloc+0x18c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800596e:	e004      	b.n	800597a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <pvPortMalloc+0xa4>
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f1      	bne.n	8005970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <pvPortMalloc+0x180>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005992:	429a      	cmp	r2, r3
 8005994:	d050      	beq.n	8005a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2208      	movs	r2, #8
 800599c:	4413      	add	r3, r2
 800599e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	2308      	movs	r3, #8
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d91f      	bls.n	80059f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <pvPortMalloc+0xf8>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	613b      	str	r3, [r7, #16]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059f2:	69b8      	ldr	r0, [r7, #24]
 80059f4:	f000 f908 	bl	8005c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <pvPortMalloc+0x188>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <pvPortMalloc+0x188>)
 8005a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <pvPortMalloc+0x188>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <pvPortMalloc+0x190>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d203      	bcs.n	8005a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <pvPortMalloc+0x188>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <pvPortMalloc+0x190>)
 8005a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <pvPortMalloc+0x184>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <pvPortMalloc+0x194>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <pvPortMalloc+0x194>)
 8005a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a38:	f7ff fa3a 	bl	8004eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <pvPortMalloc+0x174>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <pvPortMalloc+0x172>
	return pvReturn;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000422c 	.word	0x2000422c
 8005a6c:	20004240 	.word	0x20004240
 8005a70:	20004230 	.word	0x20004230
 8005a74:	20004224 	.word	0x20004224
 8005a78:	20004234 	.word	0x20004234
 8005a7c:	20004238 	.word	0x20004238

08005a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04d      	beq.n	8005b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a92:	2308      	movs	r3, #8
 8005a94:	425b      	negs	r3, r3
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <vPortFree+0xb8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <vPortFree+0x44>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <vPortFree+0x62>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60bb      	str	r3, [r7, #8]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <vPortFree+0xb8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01e      	beq.n	8005b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11a      	bne.n	8005b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <vPortFree+0xb8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b08:	f7ff f9c4 	bl	8004e94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <vPortFree+0xbc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <vPortFree+0xbc>)
 8005b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b1a:	6938      	ldr	r0, [r7, #16]
 8005b1c:	f000 f874 	bl	8005c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <vPortFree+0xc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vPortFree+0xc0>)
 8005b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b2a:	f7ff f9c1 	bl	8004eb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20004240 	.word	0x20004240
 8005b3c:	20004230 	.word	0x20004230
 8005b40:	2000423c 	.word	0x2000423c

08005b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <prvHeapInit+0xac>)
 8005b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3307      	adds	r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0307 	bic.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <prvHeapInit+0xac>)
 8005b74:	4413      	add	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <prvHeapInit+0xb0>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b82:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <prvHeapInit+0xb0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b90:	2208      	movs	r2, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <prvHeapInit+0xb4>)
 8005ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <prvHeapInit+0xb4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <prvHeapInit+0xb4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <prvHeapInit+0xb4>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <prvHeapInit+0xb8>)
 8005bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <prvHeapInit+0xbc>)
 8005bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <prvHeapInit+0xc0>)
 8005bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000624 	.word	0x20000624
 8005bf4:	20004224 	.word	0x20004224
 8005bf8:	2000422c 	.word	0x2000422c
 8005bfc:	20004234 	.word	0x20004234
 8005c00:	20004230 	.word	0x20004230
 8005c04:	20004240 	.word	0x20004240

08005c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <prvInsertBlockIntoFreeList+0xac>)
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x14>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d8f7      	bhi.n	8005c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d108      	bne.n	8005c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	441a      	add	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d118      	bne.n	8005c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00d      	beq.n	8005c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	441a      	add	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e008      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e003      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d002      	beq.n	8005ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20004224 	.word	0x20004224
 8005cb8:	2000422c 	.word	0x2000422c

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4d0d      	ldr	r5, [pc, #52]	; (8005cf4 <__libc_init_array+0x38>)
 8005cc0:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <__libc_init_array+0x3c>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	4d0b      	ldr	r5, [pc, #44]	; (8005cfc <__libc_init_array+0x40>)
 8005cce:	4c0c      	ldr	r4, [pc, #48]	; (8005d00 <__libc_init_array+0x44>)
 8005cd0:	f000 f820 	bl	8005d14 <_init>
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	08005db8 	.word	0x08005db8
 8005cf8:	08005db8 	.word	0x08005db8
 8005cfc:	08005db8 	.word	0x08005db8
 8005d00:	08005dbc 	.word	0x08005dbc

08005d04 <memset>:
 8005d04:	4402      	add	r2, r0
 8005d06:	4603      	mov	r3, r0
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d100      	bne.n	8005d0e <memset+0xa>
 8005d0c:	4770      	bx	lr
 8005d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d12:	e7f9      	b.n	8005d08 <memset+0x4>

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
